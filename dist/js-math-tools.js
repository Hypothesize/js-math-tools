(()=>{var st=(n=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(n,{get:(e,t)=>(typeof require!="undefined"?require:e)[t]}):n)(function(n){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+n+'" is not supported')});var a=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports);var h=a((vf,Rt)=>{function li(n){return typeof n=="number"&&!isNaN(n)}Rt.exports=li});var te=a((Tf,Wt)=>{var Kt=class extends Error{constructor(e){typeof window!="undefined"?super("\u{1F449} "+e):super(`

\u{1F449} [31m`+e+`
[0m`)}};Wt.exports=Kt});var m=a((Of,Ft)=>{var fi=te();Ft.exports=function(n,e){if(!n)throw new fi(e)}});var d=a((Sf,Qt)=>{function hi(n){return n===null||typeof n=="undefined"}Qt.exports=hi});var g=a((Af,Xt)=>{function mi(n){return n instanceof Array}Xt.exports=mi});var v=a((Ef,Dt)=>{var Gt=m(),di=d(),Zt=g();function Ht(n){Gt(!di(n),"You must pass one array into the `flatten` function!"),Gt(Zt(n),"The `flatten` function only works on arrays!");let e=[];return n.forEach(function(t){Zt(t)?e=e.concat(Ht(t)):e.push(t)}),e}Dt.exports=Ht});var z=a((Mf,en)=>{var pi=v(),gi=h();function qi(n){try{let e=pi(n),t=-1/0;for(let r=0;r<e.length;r++){if(!gi(e[r]))return NaN;e[r]>t&&(t=e[r])}return t===-1/0?NaN:t}catch{return NaN}}en.exports=qi});var L=a((If,tn)=>{function yi(n){return typeof n=="function"}tn.exports=yi});var b=a((jf,nn)=>{var ot=m(),bi=d(),it=g(),Ni=z(),wi=L();function xi(n){return ot(!bi(n),"You must pass a function into the `vectorize` function!"),ot(wi(n),"You must pass a function into the `vectorize` function!"),function e(){if(Object.keys(arguments).map(r=>it(arguments[r])).indexOf(!0)>-1){let r=[],s=Object.keys(arguments).filter(i=>it(arguments[i])).map(i=>arguments[i].length),o=Ni(s);s.forEach(i=>{ot(i===o,"If using arrays for all arguments to this function, then the arrays must all have equal length!")});for(let i=0;i<o;i++){let u=Object.keys(arguments).map(c=>it(arguments[c])?arguments[c][i]:arguments[c]);r.push(e(...u))}return r}else return n(...arguments)}}nn.exports=xi});var ut=a((Vf,rn)=>{var vi=h(),Ti=b();function Oi(n){try{return vi(n)?Math.abs(n):NaN}catch{return NaN}}rn.exports=Ti(Oi)});var de=a((Uf,sn)=>{var Si=h(),Ai=b();function Ei(){try{let n=0,e=Object.values(arguments);for(let t=0;t<e.length;t++){if(!Si(e[t]))return NaN;n+=e[t]}return n}catch{return NaN}}sn.exports=Ai(Ei)});var S=a((Yf,an)=>{var Ee=m(),Mi=d(),on=g(),Ii=z();function un(n){Ee(!Mi(n),"You must pass an array into the `shape` function!"),Ee(on(n),"You must pass an array into the `shape` function!");let e=[n.length],t=n.map(r=>on(r));if(t.indexOf(!0)>-1){Ee(t.indexOf(!1)<0,"The array passed into the `shape` function has some children that are not themselves arrays!");let r=n.map(o=>o.length),s=Ii(r);r.forEach(function(o){Ee(o===s,"The array passed into the `shape` function has some children of inconsistent length!")}),e=e.concat(un(n[0]))}return e}an.exports=un});var pe=a((Cf,ln)=>{var cn=m(),ji=d(),Vi=g();function Ui(n){cn(!ji(n),"You must pass an array into the `reverse` function!"),cn(Vi(n),"You must pass an array into the `reverse` function!");let e=[];for(let t=n.length-1;t>=0;t--)e.push(n[t]);return e}ln.exports=Ui});var k=a((zf,hn)=>{var ge=m(),Yi=d(),Ci=g(),zi=h(),ki=v(),qe="You must pass a natural number or a one-dimensional array of natural numbers into the `ndarray` function!";function fn(n,e){if(e||(ge(!Yi(n),qe),Ci(n)||(n=[n]),n=ki(n),ge(n.length>0,qe),n.forEach(t=>{ge(zi(t),qe),ge(parseInt(t)===t,qe),ge(t>=0,qe)})),n.length===1){let t=[];for(let r=0;r<n[0];r++)t.push(void 0);return t}else{let t=[];for(let r=0;r<n[0];r++)t.push(fn(n.slice(1),!0));return t}}hn.exports=fn});var ne=a((kf,dn)=>{var at=m(),$i=d(),Pi=g(),_i=S(),mn=pe(),Bi=k();function Ji(n){at(!$i(n),"You must pass an array into the `transpose` function!"),at(Pi(n),"You must pass an array into the `transpose` function!");let e=_i(n);if(at(e.length<=2,"I'm not smart enough to know how to transpose arrays that have more than 2 dimensions. Sorry for the inconvenience! Please only pass 1- or 2-dimensional arrays into the `transpose` function!"),e.length===1)return mn(n);if(e.length===2){let t=Bi(mn(e));for(let r=0;r<e[0];r++)for(let s=0;s<e[1];s++)t[s][r]=n[r][s];return t}}dn.exports=Ji});var lt=a(($f,bn)=>{var C=m(),pn=d(),gn=g(),Li=h(),qn=S(),ct=ne();function yn(n,e,t=0){C(!pn(n),"You must pass two arrays into the `append` function!"),C(!pn(e),"You must pass two arrays into the `append` function!"),C(gn(n),"You must pass two arrays into the `append` function!"),C(gn(e),"You must pass two arrays into the `append` function!"),C(Li(t),"The `axis` argument to the `append` function must be 0 or 1!"),C(t>=0&&t<2,"The `axis` argument to the `append` function must be 0 or 1!"),C(parseInt(t)===t,"The `axis` argument to the `append` function must be 0 or 1!");let r=qn(n),s=qn(e);C(r.length===s.length,"The two arrays passed into the `append` function must have the same number of dimensions!"),C(r.length<3&&s.length<3,"The two arrays passed into the `append` function must be 1- or 2-dimensional!");for(let o=0;o<r.length;o++)o!==t&&C(r[o]===s[o],`The two arrays passed into the \`append\` function must have the same shapes along all axes *except* the axis along which they're being appended! (${r[o]} != ${s[o]})`);if(C(t<r.length,"The axis argument you passed into the `append` function is out of bounds for the array!"),r.length===0)return[];if(r.length===1)return n.concat(e);if(r.length===2){if(t===0){let o=[];for(let i=0;i<r[0];i++)o.push(n[i]);for(let i=0;i<s[0];i++)o.push(e[i]);return o}else if(t===1)return ct(yn(ct(n),ct(e),0))}}bn.exports=yn});var $=a((Pf,Nn)=>{var Ri=b();function Ki(n,e){try{return e(n)}catch{return NaN}}Nn.exports=Ri(Ki)});var xn=a((_f,wn)=>{var Wi=h(),Fi=b();function Qi(n){try{return Wi(n)?Math.acos(n):NaN}catch{return NaN}}wn.exports=Fi(Qi)});var Tn=a((Bf,vn)=>{var Xi=h(),Gi=b();function Zi(n){try{return Xi(n)?Math.asin(n):NaN}catch{return NaN}}vn.exports=Gi(Zi)});var Sn=a((Jf,On)=>{var Hi=h(),Di=b();function eu(n){try{return Hi(n)?Math.atan(n):NaN}catch{return NaN}}On.exports=Di(eu)});var re=a((Rf,En)=>{var Lf=g();function An(n,e){let t=typeof n;if(t!==typeof e)return!1;if(t==="undefined")return!0;if(t==="boolean"||t==="number"||t==="bigint"||t==="string"||t==="function")return n===e;if(t==="object"){if(n===null||e===null)return n===null&&e===null;{let s=Object.keys(n),o=Object.keys(e);if(s.length!==o.length)return!1;for(let i=0;i<s.length;i++){let u=s[i];if(!e.hasOwnProperty(u)||!An(n[u],e[u]))return!1}return!0}}}En.exports=An});var ye=a((Kf,Un)=>{var Mn=m(),tu=d(),In=g(),ft=S(),jn=re();function Vn(n,e,t){if(Mn(!tu(n),"You must pass an array and a value into the `indexOf` function!"),Mn(In(n),"You must pass an array and a value into the `indexOf` function!"),ft(n).length===1||In(e)&&jn(ft(n[0]),ft(e))){for(let r=0;r<n.length;r++){let s=n[r];if(jn(s,e)&&(t?s===e:!0))return[r]}return null}else for(let r=0;r<n.length;r++){let s=n[r],o=Vn(s,e);if(o)return[r].concat(o)}return null}Un.exports=Vn});var Cn=a((Wf,Yn)=>{var nu=ye(),ru=z();function su(n){try{return nu(n,ru(n))}catch{return NaN}}Yn.exports=su});var Me=a((Ff,zn)=>{var ou=v(),iu=h();function uu(n){try{let e=ou(n),t=1/0;for(let r=0;r<e.length;r++){if(!iu(e[r]))return NaN;e[r]<t&&(t=e[r])}return t===1/0?NaN:t}catch{return NaN}}zn.exports=uu});var $n=a((Qf,kn)=>{var au=ye(),cu=Me();function lu(n){try{return au(n,cu(n))}catch{return NaN}}kn.exports=lu});var _n=a((Xf,Pn)=>{var fu=h(),hu=b();function mu(n){try{return fu(n)?Math.ceil(n):NaN}catch{return NaN}}Pn.exports=hu(mu)});var Ln=a((Gf,Jn)=>{var du=d(),pu=ut(),gu=b(),Bn=h();function qu(n,e){try{if(!Bn(n))return NaN;if(du(e))e=1e-10;else if(!Bn(e))return NaN;return pu(n)<e?0:n}catch{return NaN}}Jn.exports=gu(qu)});var Kn=a((Zf,Rn)=>{var ht=h(),yu=b();function bu(n,e,t){try{return ht(n)?ht(e)?ht(t)?n<e?e:n>t?t:n:NaN:NaN:NaN}catch{return NaN}}Rn.exports=yu(bu)});var be=a((Hf,Wn)=>{var Nu=h(),wu=v();function xu(n){try{let e=wu(n),t=0;for(let r=0;r<e.length;r++){if(!Nu(e[r]))return NaN;t+=e[r]}return t/e.length}catch{return NaN}}Wn.exports=xu});var Ie=a((Df,Fn)=>{var vu=be(),Tu=v(),Ou=h();function Su(n){try{let e=Tu(n),t=vu(e),r=0;for(let s=0;s<e.length;s++){if(!Ou(e[s]))return NaN;r+=(e[s]-t)*(e[s]-t)}return r/e.length}catch{return NaN}}Fn.exports=Su});var Zn=a((eh,Gn)=>{var Qn=be(),Xn=Ie();function Au(n,e){try{let t=Qn(n),r=Qn(e),s=Math.sqrt((Xn(n)+Xn(e))/2);return(t-r)/s}catch{return NaN}}Gn.exports=Au});var tr=a((th,er)=>{var Hn=g(),Eu=h(),je=m();function Dn(n,e){if(je(Hn(n),"The `combine` function only works on arrays!"),je(Eu(e),"`r` must be a whole number!"),e>n.length)return[n];if(e<=0)return[[]];if(je(e===parseInt(e),"`r` must be a whole number!"),n.length<2)return n;let t=[];return n.forEach((r,s)=>{je(!Hn(r),"It is not recommended to get combinations of arrays of arrays. Weird things happen, and I haven't figured out how to account for such a scenario yet. A possible workaround is: convert each sub-array to a string (using `JSON.stringify`), get the combinations using the array of strings, and then convert each string in each combination back to a sub-array (using `JSON.parse`).");let o=n.slice(s+1);if(o.length<e-1)return;Dn(o,e-1).forEach(u=>{t.push([r].concat(u))})}),t}er.exports=Dn});var se=a((rh,nr)=>{var nh=m(),Mu=d(),Iu=g();function mt(n){if(typeof n=="object"){if(Mu(n))return n;if(Iu(n))return n.map(mt);{let e={};return Object.keys(n).forEach(function(t){e[t]=mt(n[t])}),e}}else return n}nr.exports=mt});var dt=a((sh,or)=>{var rr=be(),sr=d();function ju(n,e){try{let t=rr(n),r=rr(e),s=Math.max(n.length,e.length),o=0;for(let i=0;i<s;i++){if(sr(n[i]))return NaN;if(sr(e[i]))return NaN;o+=(n[i]-t)*(e[i]-r)}return o/n.length}catch{return NaN}}or.exports=ju});var Ve=a((oh,ir)=>{var Vu=h(),Uu=b();function Yu(n){try{return Vu(n)?Math.sqrt(n):NaN}catch{return NaN}}ir.exports=Uu(Yu)});var Ue=a((ih,ur)=>{var Cu=Ve(),zu=Ie();function ku(n){try{return Cu(zu(n))}catch{return NaN}}ur.exports=ku});var lr=a((uh,cr)=>{var $u=dt(),ar=Ue();function Pu(n,e){try{return $u(n,e)/(ar(n)*ar(e))}catch{return NaN}}cr.exports=Pu});var hr=a((ah,fr)=>{var _u=h(),Bu=b();function Ju(n){try{return _u(n)?Math.cos(n):NaN}catch{return NaN}}fr.exports=Bu(Ju)});var X=a((ch,dr)=>{var mr=m(),Lu=d(),Ru=g(),Ku=v();function Wu(n){mr(!Lu(n),"You must pass an array into the `set` function!"),mr(Ru(n),"You must pass an array into the `set` function!");let e=[],t={};return Ku(n).forEach(r=>{let s=typeof r=="undefined"?"undefined":typeof r=="function"?r.toString():JSON.stringify(r);t[s]||e.push(r),t[s]=!0}),e}dr.exports=Wu});var Ye=a((lh,br)=>{var pr=m(),gr=d(),qr=g(),yr=v(),Fu=re(),Qu=X();function Xu(n,e){pr(!gr(n),"You must pass an array and some items to count into the `count` function!"),pr(qr(n),"You must pass an array and some items to count into the `count` function!");let t=yr(n);return e=gr(e)?Qu(n):e,qr(e)?yr(e).map(function(r){let s=t.filter(o=>Fu(r,o)).length;return{item:r,count:s}}):t.filter(r=>r===e).length}br.exports=Xu});var oe=a((fh,Tr)=>{var Ne=m(),Nr=g(),wr=h(),Gu=S(),xr=v(),Zu=n=>n.reduce((e,t)=>e*t);function vr(n,e){if(Ne(Nr(n),"The first argument passed into the `reshape` function must be an array!"),wr(e)&&(e=[e]),Ne(Nr(e),"The second argument passed into the `reshape` function must be a whole number or a one-dimensional array of whole numbers!"),Ne(Gu(e).length===1,"The first argument passed into the `reshape` function must be a whole number or a one-dimensional array of whole numbers!"),e.forEach(o=>{Ne(wr(o)&&parseInt(o)===o&&o>0,"The first argument passed into the `reshape` function must be a whole number or a one-dimensional array of whole numbers!")}),e.length<=1)return xr(n);let t=xr(n);Ne(Zu(e)===t.length,"The new shape doesn't match the number of values available in `x` (the first argument passed into the `reshape` function)!");let r=[],s=parseInt(t.length/e[0]);for(let o=0;o<e[0];o++){let i=t.slice(o*s,(o+1)*s);r.push(vr(i,e.slice(1)))}return r}Tr.exports=vr});var ie=a((dh,Vr)=>{var hh=k(),mh=$(),Or=d(),Hu=m(),Sr=h(),Ar=se(),Du=oe(),Er=Math.pow(2,64),N=[];Ir(parseInt(Math.random()*Er));function ea(n,e){n=A(n);function t(){n+=A("0x9e3779b97f4a7c15");let s=Ar(n);return s=(s^s>>30n)*A("0xbf58476d1ce4e5b9"),s=(s^s>>27n)*A("0x94d049bb133111eb"),s^s>>31n}let r=[];for(let s=0;s<e;s++)r.push(t());return r}function A(n){return BigInt.asUintN(64,BigInt(n))}function Mr(n,e){return n=A(n),e=BigInt(e),A(A(n<<e)|A(n>>A(64n-e)))}function Ir(n){if(Or(n))return Ar(N);{Hu(Sr(n),"If passing a value into the `seed` function, then that value must be an integer!");let e=ea(parseInt(n),4);N[0]=e[0],N[1]=e[1],N[2]=e[2],N[3]=e[3]}}function jr(){let n=A(Mr(N[0]+N[3],23)+N[0]),e=A(N[1]<<17n);return N[2]=A(N[2]^N[0]),N[3]=A(N[3]^N[1]),N[1]=A(N[1]^N[2]),N[0]=A(N[0]^N[3]),N[2]=A(N[2]^e),N[3]=Mr(N[3],45),parseInt(n)/Er}function ta(n){if(Or(n))return jr();Sr(n)&&(n=[n]);let e=[],t=1;n.forEach(r=>t*=r);for(let r=0;r<t;r++)e.push(jr());return Du(e,n)}Vr.exports={random:ta,seed:Ir}});var Ce=a((ph,Yr)=>{var Ur=m(),na=g(),ra=d(),sa=h(),oa=S();function ia(n){return Ur(na(n),"The value passed into the `dropNaN` function must be a one-dimensional array!"),Ur(oa(n).length===1,"The value passed into the `dropNaN` function must be a one-dimensional array"),n.filter(e=>!ra(e)&&sa(e))}Yr.exports=ia});var ue=a((gh,Cr)=>{function ua(n){return typeof n=="boolean"}Cr.exports=ua});var G=a((qh,zr)=>{function aa(n){return typeof n=="string"}zr.exports=aa});var Z=a((yh,kr)=>{var pt=m(),gt=d(),qt=h(),ca=pe();function la(n,e,t=1){pt(!gt(n)&&!gt(e)&&!gt(t),"You must pass two numbers and optionally a step value to the `range` function!"),pt(qt(n)&&qt(e)&&qt(t),"You must pass two numbers and optionally a step value to the `range` function!"),pt(t>0,"The step value must be greater than 0! (NOTE: The step value is a magnitude; it does not indicate direction.)");let r=!1;if(n>e){r=!0;let o=n;n=e+t,e=o+t}let s=[];for(let o=n;o<e;o+=t)s.push(o);return r&&(s=ca(s)),s}kr.exports=la});var ae=a((bh,Pr)=>{var yt=m(),$r=d(),fa=g(),ha=L();function ma(n,e){return n<e?-1:n>e?1:0}function da(n,e){$r(e)&&(e=ma),yt(!$r(n),"You must pass an array into the `sort` function!"),yt(fa(n),"You must pass an array into the `sort` function!"),yt(ha(e),"The second parameter of the `sort` function must be a comparison function!");let t=n.slice();return t.sort(e),t}Pr.exports=da});var $e=a((xh,Rr)=>{var y=m(),ze=g(),H=d(),ce=S(),ke=ne(),we=Z(),bt=h(),xe=G(),Nh=$(),pa=L(),ga=k(),Nt=se(),qa=X(),_r=pe(),Br=ae(),Jr=ue(),wh=Pe();function ya(n){return bt(n)&&parseInt(n)===n}function ba(n){return ya(n)&&n>=0}function Lr(n,e){y(bt(n),"The `leftPad` function only works on numbers!");let t=n.toString();for(;t.length<e;)t="0"+t;return t}var P=class{constructor(e){let t=this;if(t.name="data",Object.defineProperty(t,"_values",{value:[],configurable:!0,enumerable:!1,writable:!0}),Object.defineProperty(t,"values",{configurable:!0,enumerable:!0,get(){return t._values},set(r){y(ze(r),"The new values must be a 1-dimensional array!");let s=ce(r);y(s.length===1,"The new array of values must be 1-dimensional!"),s[0]<t._index.length?t._index=t._index.slice(0,s[0]):s[0]>t._index.length&&(t._index=t._index.concat(we(t._index.length,s[0]).map(o=>"row"+Lr(o,(r.length-1).toString().length)))),t._values=r}}),Object.defineProperty(t,"_index",{value:[],configurable:!0,enumerable:!1,writable:!0}),Object.defineProperty(t,"index",{configurable:!0,enumerable:!0,get(){return t._index},set(r){y(ze(r),"The new index must be a 1-dimensional array of strings!"),y(r.length===t.shape[0],"The new index must be the same length as the old index!"),y(ce(r).length===1,"The new index must be a 1-dimensional array of strings!"),r.forEach(s=>{y(xe(s),"All of the row names must be strings!")}),t._index=r}}),e){let r=ce(e);y(r.length===1,"The `data` array passed into the constructor of a DataFrame must be 1-dimensional!"),t.values=e}}get shape(){return ce(this.values)}isEmpty(){return this.values.filter(t=>!H(t)).length===0}clear(){let e=this,t=e.copy();return t.values=ga(t.shape),t.index=e.index,t}get(e){let t=this;(xe(e)||bt(e))&&(e=[e]);let r=qa((e||[]).map(s=>typeof s));return y(r.length<=2,"Only whole numbers and/or strings are allowed in `get` arrays!"),r.length===1&&y(r[0]==="string"||r[0]==="number","Only whole numbers and/or strings are allowed in `get` arrays!"),r.length===2&&(y(r.indexOf("string")>-1,"Only whole numbers and/or strings are allowed in `get` arrays!"),y(r.indexOf("number")>-1,"Only whole numbers and/or strings are allowed in `get` arrays!")),H(e)||(e=e.map(s=>{if(typeof s=="string")return y(t.index.indexOf(s)>-1,`Index "${s}" does not exist!`),s;if(typeof s=="number")return y(s>=0,`Index ${s} is out of bounds!`),y(parseInt(s)===s,"Indices must be integers!"),y(s<t.index.length,`Index ${s} is out of bounds!`),t.index[s]})),t.getSubsetByNames(e)}getSubsetByNames(e){let t=this;H(e)&&(e=t.index),y(ze(e),"The `indices` array must be a 1-dimensional array of strings."),y(ce(e).length===1,"The `indices` array must be a 1-dimensional array of strings."),y(e.length>0,"The `indices` array must contain at least one index name."),e.forEach(o=>{y(xe(o),"The `indices` array must contain only strings."),y(t.index.indexOf(o)>-1,`The name "${o}" does not exist in the index.`)});let r=e.map(o=>t.values[t.index.indexOf(o)]);if(r.length===1)return r[0];let s=new P(r);return s.index=e,s.name=t.name,s}getSubsetByIndices(e){let t=this,r=t.shape;H(e)&&(e=we(0,r[0])),y(ze(e),"The `indices` array must be 1-dimensional array of whole numbers."),y(ce(e).length===1,"The `indices` array must be a 1-dimensional array of whole numbers."),y(e.length>0,"The `indices` array must contain at least one index."),e.forEach(o=>{y(ba(o),"The `indices` array must be a 1-dimensional array of whole numbers."),y(o<t.index.length,`The row index ${o} is out of bounds.`)});let s=e.map(o=>t.index[o]);return t.getSubsetByNames(s)}loc(e){return this.getSubsetByNames(e)}iloc(e){return this.getSubsetByIndices(e)}reverse(){let e=this,t=new P(_r(e.values));return t.index=_r(e.index),t.name=e.name,t}resetIndex(){let e=this,t=e.copy();return t.index=we(0,e.shape[0]).map(r=>"row"+Lr(r,(t.index.length-1).toString().length)),t}copy(){let e=this,t=new P(Nt(e.values));return t.index=e.index.slice(),t.name=e.name,t}apply(e){y(pa(e),"The parameter to the `apply` method must be a function.");let r=this.copy();return r.values=r.values.map((s,o)=>e(s,r.index[o])),r}dropMissing(e,t){let s=this.copy(),o=[];return s.values=s.values.filter((i,u)=>H(i)?!1:(o.push(s.index[u]),!0)),s.index=o,s}toObject(){let e=this,t={};return t[e.name]={},e.index.forEach((r,s)=>{t[e.name][r]=e.values[s]}),t}print(){let e=this,t=e.copy(),r=typeof window=="undefined"?20:10;if(t.index.length>r){t=t.get(we(0,r/2).concat(we(t.index.length-r/2,t.index.length)));let o=Nt(t.index);o.splice(parseInt(o.length/2),0,"..."),t.values.push("..."),t.index.push("..."),t=t.get(o)}let s={};return t.values.forEach((o,i)=>{let u={};u[t.name]=o,s[t.index[i]]=u}),console.table(s),e}sort(e){y(Jr(e)||xe(e)||H(e),"The `sort` method can take an optional parameter that's either a string representing a direction ('ascending' or 'descending') or a boolean representing whether or not the direction is ascending (true or false).");let t=!0;H(e)&&(t=!0),xe(e)&&(e=e.trim().toLowerCase(),y(e==="ascending"||e==="descending","The `sort` method can take an optional parameter that's either a string representing a direction ('ascending' or 'descending') or a boolean representing whether or not the direction is ascending (true or false)."),t=e==="ascending"),Jr(e)&&(t=e);let r=this,s=ke([r.values,r.index]);s=ke(Br(s,(i,u)=>{if(i[0]===u[0])return 0;if(i[0]<u[0])return t?-1:1;if(i[0]>u[0])return t?1:-1}));let o=new P(s[0]);return o.index=s[1],o.name=r.name,o}sortByIndex(){let e=this,t=ke([e.values,e.index]);t=ke(Br(t,(s,o)=>{if(s[1]===o[1])return 0;if(s[1]<o[1])return-1;if(s[1]>o[1])return 1}));let r=new P(t[0]);return r.index=t[1],r.name=e.name,r}filter(e){let t=this,r=t.copy(),s=Nt(r.index),o=[],i=r.values.filter((u,c)=>{let l=e(u,c,r.values);return l||o.push(r.index[c]),l});return o.forEach(u=>{s.splice(s.indexOf(u),1)}),i.length===0?(r=new P,r.name=t.name,r):(r.values=i,r.index=s,r)}};Rr.exports=P});var wt=a((vh,Kr)=>{var Na=m(),wa=h();function xa(n,e){Na(wa(n),"The `leftPad` function only works on numbers!");let t=n.toString();for(;t.length<e;)t="0"+t;return t}Kr.exports=xa});var _e=a((Th,Wr)=>{var va=g(),Ta=d();function Oa(n){return typeof n=="object"&&!Ta(n)&&!va(n)}Wr.exports=Oa});var xt=a((Oh,Fr)=>{var Sa=G(),Aa=_e(),Ea=ue(),Ma=d(),Ia=te();function ja(n,e){e=(()=>{if(Ma(e))return!0;if(Ea(e))return e;throw new Ia("The `shouldIncludeIndex` parameter of the `toCSVString` method must be a boolean!")})();let t=[""].concat(n.index);return[n.columns].concat(n.values).map((s,o)=>(e?[t[o]]:[]).concat(s).map(u=>Sa(u)?JSON.stringify(u):Aa(u)?JSON.stringify(JSON.stringify(u)):u.toString()).join(",")).join(`
`)}Fr.exports=ja});var Xr=a((Sh,Qr)=>{var Va=xt();function Ua(n,e,t){let r=Va(n,t);try{let s=e;if(e.includes("/")){let i=e.split("/");s=i[i.length-1]}let o=document.createElement("a");o.href=`data:text/csv;charset=utf-8,${encodeURIComponent(r)}`,o.download=s,o.dispatchEvent(new MouseEvent("click"))}catch{}try{let s=st("fs"),o=st("path");s.writeFileSync(o.resolve(e),r,"utf8")}catch{}return n}Qr.exports=Ua});var vt=a((Mh,Hr)=>{var R=g(),Gr=ue(),Ah=_e(),Eh=wt(),Ya=z(),Zr=Z(),Be=G(),Je=te(),Le=d(),K=m();function Ca(n,e,t,r,s,o){return t=(()=>{if(Le(t))return!1;if(Gr(t))return t;throw new Je("The `hasHeaderRow` parameter of the `fromCSV` method must be a boolean!")})(),r=(()=>{if(Le(r))return!1;if(Gr(r))return r;throw new Je("The `hasIndexColumn` parameter of the `fromCSV` method must be a boolean!")})(),s=(()=>{let u="The `fieldDelimiter` parameter of the `fromCSV` method must be one of:\n\n1) a single-character string (e.g., ',')\n2) an array containing two single-character strings, one each for a left delimiter and a right delimiter (e.g., ['<', '>'])";if(Le(s))return",";if(Be(s))return K(s.length===1,u),s;if(R(s))return K(s.length===2,u),K(s[0].length===1,u),K(s[1].length===1,u),s;throw new Je(u)})(),o=(()=>{let u="The `stringDelimiter` parameter of the `fromCSV` method must be one of:\n\n1) a single-character string (e.g., '\"')\n2) an array containing two single-character strings, one each for a left delimiter and a right delimiter (e.g., ['\u201C', '\u201D'])";if(Le(o))return'"';if(Be(o))return K(o.length===1,u),o;if(R(o))return K(o.length===2,u),K(o[0].length===1,u),K(o[1].length===1,u),o;throw new Je(u)})(),(()=>{let c=e.split(`
`).filter(M=>M.length>0).map(M=>{let j=[],ee="",me=!1;for(let J=0;J<M.length;J++){let V=M[J];if(V.match(/\\/g))J++;else if(R(o)&&V===o[0])me=!0;else if(R(o)&&V===o[1])me=!1;else if(Be(o)&&V===o)me=!me;else if(R(s)&&V===s[0]||R(s)&&V===s[1]||Be(s)&&V===s)if(me)ee+=V;else{let nt=ee;try{let rt=JSON.parse(nt);R(rt)?j.push(nt.trim()):j.push(rt)}catch{j.push(nt.trim())}ee=""}else ee+=V}if(ee.length>0){let J=ee;try{let V=JSON.parse(J);R(V)?j.push(J.trim()):j.push(V)}catch{j.push(J.trim())}}return j}),l=(()=>{let M=t?c.shift():Zr(0,c[0].length).map(j=>"col"+j);return r&&M.shift(),M})(),p=(()=>r?c.map(j=>j.shift()):Zr(0,c.length).map(j=>"row"+j))(),q=Ya(c.map(M=>M.length)),U=new n(c.map(M=>(M.length=q,M)));return t&&(U.columns=l),r&&(U.index=p),U})()}Hr.exports=Ca});var es=a((Ih,Dr)=>{var za=m(),ka=vt(),$a=G(),Pa=d(),_a=te();async function Ba(n,e,t,r,s,o,i){t=(()=>Pa(t)?"utf8":(za($a(t),"The `encoding` parameter of the `fromCSV` method must be a string (e.g., 'utf8')!"),t))();let u=await(async()=>{try{return await(await fetch(e)).text()}catch{}try{return st("fs").readFileSync(e,t)}catch{}throw new _a(`The path "${e}" could not be loaded!`)})();return ka(n,u,r,s,o,i)}Dr.exports=Ba});var Re=a((jh,ts)=>{var Ja=h(),La=b();function Ra(n){try{return Ja(n)?Math.floor(n):NaN}catch{return NaN}}ts.exports=La(Ra)});var Tt=a((Uh,rs)=>{var ns=m(),Ka=d(),Wa=g(),Vh=Re(),{random:Fa}=ie();function Qa(n){ns(!Ka(n),"You must pass an array into the `shuffle` function!"),ns(Wa(n),"You must pass an array into the `shuffle` function!");let e=[],t=n.slice();for(let r=0;r<n.length;r++){let s=parseInt(Fa()*t.length);e.push(t.splice(s,1)[0])}return e}rs.exports=Qa});var is=a((Yh,os)=>{var Xa=d(),Ga=m(),ss=Tt();function Za(n,e){return Xa(e)&&(e=0),Ga(e===0||e===1,"The `axis` parameter to the `shuffle` must be 0, 1, or undefined."),n.get(e===0?ss(n.index):null,e===1?ss(n.columns):null)}os.exports=Za});var Pe=a(($h,hs)=>{var{random:Ha}=ie(),Ch=$(),f=m(),D=se(),us=Ye(),Da=Ce(),_=v(),O=g(),Ot=ue(),as=re(),cs=L(),W=h(),E=G(),T=d(),zh=z(),kh=Me(),ec=k(),Y=Z(),I=$e(),ls=X(),x=S(),tc=ae(),ve=ne(),Ke=wt(),nc=Xr(),rc=xt(),sc=es(),oc=vt(),ic=is();function We(n){let e="abcdefghijklmnopqrstuvwxyz1234567890",t="";for(let r=0;r<n;r++)t+=e[parseInt(Math.random()*e.length)];return t}function uc(n){return W(n)&&parseInt(n)===n}function Fe(n){return uc(n)&&n>=0}function ac(n){return n instanceof Object&&!O(n)}function le(n){return n instanceof I}function fs(n){let e={};return _(n).forEach((t,r)=>{e[t]=r}),e}function fe(n){return Object.keys(n).sort((e,t)=>n[e]-n[t])}var w=class{constructor(e){let t=this;if(Object.defineProperty(t,"_values",{value:[],configurable:!0,enumerable:!1,writable:!0}),Object.defineProperty(t,"values",{configurable:!0,enumerable:!0,get(){return t._values},set(r){f(O(r),"The new values must be a 2-dimensional array!");let s=x(r);f(s.length===2,"The new array of values must be 2-dimensional!"),s[0]<t._index.length?t._index=t._index.slice(0,s[0]):s[0]>t._index.length&&(t._index=t._index.concat(Y(t._index.length,s[0]).map(o=>"row"+Ke(o,(s[0]-1).toString().length)))),s[1]<t._columns.length?t._columns=t._columns.slice(0,s[1]):s[1]>t._columns.length&&(t._columns=t._columns.concat(Y(t._columns.length,s[1]).map(o=>"col"+Ke(o,(s[1]-1).toString().length)))),t._values=r}}),Object.defineProperty(t,"_columns",{value:[],configurable:!0,enumerable:!1,writable:!0}),Object.defineProperty(t,"columns",{configurable:!0,enumerable:!0,get(){return t._columns},set(r){f(O(r),"The new columns list must be a 1-dimensional array of strings!"),f(r.length===t.shape[1],"The new columns list must be the same length as the old columns list!"),f(x(r).length===1,"The new columns list must be a 1-dimensional array of strings!"),r=r.map(o=>(typeof o!="string"&&(o=JSON.stringify(o)||o.toString()),o.trim().length===0?"untitled_"+We(8):o.trim()));let s=(()=>{let o=us(r),i={};return o.forEach(u=>{i[u.item]=u.count}),i})();r=r.map(o=>s[o]>1?o+"_"+We(8):o),t._columns=r}}),Object.defineProperty(t,"_index",{value:[],configurable:!0,enumerable:!1,writable:!0}),Object.defineProperty(t,"index",{configurable:!0,enumerable:!0,get(){return t._index},set(r){f(O(r),"The new index must be a 1-dimensional array of strings!"),f(r.length===t.shape[0],"The new index must be the same length as the old index!"),f(x(r).length===1,"The new index must be a 1-dimensional array of strings!"),r=r.map(o=>(typeof o!="string"&&(o=JSON.stringify(o)||o.toString()),o.trim().length===0?"untitled_"+We(8):o.trim()));let s=(()=>{let o=us(r),i={};return o.forEach(u=>{i[u.item]=u.count}),i})();r=r.map(o=>s[o]>1?o+"_"+We(8):o),t._index=r}}),f(T(e)||e instanceof Object,"The `data` passed into the constructor of a DataFrame must be either (1) an object where the key-value pairs are (respectively) column names and 1-dimensional arrays of values, or (2) a 2-dimensional array of values."),e)if(O(e)){let r=x(e);f(r.length===2,"The `data` array passed into the constructor of a DataFrame must be 2-dimensional!"),t.values=e}else{t._columns=Object.keys(e);let r=[];t._columns.forEach(o=>{let i=e[o];r.push(i)}),t._values=ve(r);let s=x(t.values);t._index=Y(0,s[0]).map(o=>"row"+Ke(o,(s[0]-1).toString().length))}}get shape(){return x(this.values)}get rows(){return this.index}set rows(e){let t=this;t.index=e}isEmpty(){return ls(this.values).filter(t=>!T(t)).length===0}clear(){let e=this,t=new w(ec(e.shape));return t.columns=e.columns.slice(),t.index=e.index.slice(),t}get(e,t){let r=this;(E(e)||W(e))&&(e=[e]),(E(t)||W(t))&&(t=[t]);let s=ls((e||[]).concat(t||[]).map(o=>typeof o));return f(s.length<=2,"Only whole numbers and/or strings are allowed in `get` arrays!"),s.length===1&&f(s[0]==="string"||s[0]==="number","Only whole numbers and/or strings are allowed in `get` arrays!"),s.length===2&&(f(s.indexOf("string")>-1,"Only whole numbers and/or strings are allowed in `get` arrays!"),f(s.indexOf("number")>-1,"Only whole numbers and/or strings are allowed in `get` arrays!")),T(e)||(e=e.map(o=>{if(typeof o=="string")return f(r.index.indexOf(o)>-1,`Row "${o}" does not exist!`),o;if(typeof o=="number")return f(o>=0,`Index ${o} is out of bounds!`),f(parseInt(o)===o,"Row numbers must be integers!"),f(o<r.index.length,`Index ${o} is out of bounds!`),r.index[o]})),T(t)||(t=t.map(o=>{if(typeof o=="string")return f(r.columns.indexOf(o)>-1,`Column "${o}" does not exist!`),o;if(typeof o=="number")return f(o>=0,`Column ${o} is out of bounds!`),f(parseInt(o)===o,"Column numbers must be integers!"),f(o<r.columns.length,`Column ${o} is out of bounds!`),r.columns[o]})),r.getSubsetByNames(e,t)}getSubsetByNames(e,t){let r=this;T(e)&&(e=r.index),T(t)&&(t=r.columns),typeof e=="string"&&(e=[e]),typeof t=="string"&&(t=[t]),f(O(e)&&O(t),"The `rows` and `cols` parameters must be 1-dimensional arrays of strings."),f(x(e).length===1&&x(t).length===1,"The `rows` and `cols` parameters must be 1-dimensional arrays of strings."),f(e.length>0,"The `rows` array must contain at least one row name."),f(t.length>0,"The `cols` array must contain at least one column name."),e.forEach(i=>{f(E(i),"The `rows` and `cols` parameters must be 1-dimensional arrays of strings."),f(r.index.indexOf(i)>-1,`The row name "${i}" does not exist in the list of rows.`)}),t.forEach(i=>{f(E(i),"The `rows` and `cols` parameters must be 1-dimensional arrays of strings."),f(r.columns.indexOf(i)>-1,`The column name "${i}" does not exist in the list of columns.`)});let s=e.map(i=>t.map(u=>r.values[r.index.indexOf(i)][r.columns.indexOf(u)]));if(e.length===1&&t.length===1)return _(s)[0];if(e.length===1){let i=new I(_(s));return i.name=e[0],i.index=t,i}if(t.length===1){let i=new I(_(s));return i.name=t[0],i.index=e,i}let o=new w(s);return o.columns=t,o.index=e,o}getSubsetByIndices(e,t){let r=this,s=r.shape;T(e)&&(e=Y(0,s[0])),T(t)&&(t=Y(0,s[1])),typeof e=="number"&&(e=[e]),typeof t=="number"&&(t=[t]),f(O(e)&&O(t),"The `rowIndices` and `colIndices` parameters must be 1-dimensional arrays of whole numbers."),f(x(e).length===1&&x(t).length===1,"The `rowIndices` and `colIndices` parameters must be 1-dimensional arrays of whole numbers."),f(e.length>0,"The `rowIndices` array must contain at least one index."),f(t.length>0,"The `colIndices` array must contain at least one index."),e.forEach(u=>{f(Fe(u),"The `rowIndices` and `colIndices` parameters must be 1-dimensional arrays of whole numbers."),f(u<r.index.length,`The row index ${u} is out of bounds.`)}),t.forEach(u=>{f(Fe(u),"The `rowIndices` and `colIndices` parameters must be 1-dimensional arrays of whole numbers."),f(u<r.columns.length,`The column index ${u} is out of bounds.`)});let o=e.map(u=>r.index[u]),i=t.map(u=>r.columns[u]);return r.getSubsetByNames(o,i)}loc(e,t){return this.getSubsetByNames(e,t)}iloc(e,t){return this.getSubsetByIndices(e,t)}transpose(){let e=this,t=new w(ve(e.values));return t.columns=e.index,t.index=e.columns,t}get T(){return this.transpose()}resetIndex(){let e=this,t=e.copy();return t.index=Y(0,e.shape[0]).map(r=>"row"+Ke(r,(t.index.length-1).toString().length)),t}copy(){let e=this;if(e.isEmpty())return new w;let t=new w(D(e.values));return t.columns=e.columns.slice(),t.index=e.index.slice(),t}assign(e,t){let r,s;T(t)?(s=e,f(!O(s),"When using only one parameter for the `assign` method, the parameter must be an object or a Series.")):(r=e,s=t,f(E(r),"When using two parameters for the `assign` method, the first parameter must be a string."),f(le(s)||O(s)&&x(s).length===1,"When using two parameters for the `assign` method, the second parameter must be a Series or a 1-dimensional array.")),f(ac(s)||le(s)||O(s)&&x(s).length===1,"An object, Series, or 1-dimensional array must be passed into the `assign` method.");let o=this;if(le(s)){let i={};return f(o.isEmpty()||as(s.index,o.index),"The index of the new data does not match the index of the DataFrame."),i[r||s.name]=s.values,o.assign(i)}else if(O(s)){let i={};return i[r||"data"]=s,o.assign(i)}else{let i=o.copy(),u=i.shape;return Object.keys(s).forEach(c=>{let l=s[c];if(f(O(l),"Each key-value pair must be (respectively) a string and a 1-dimensional array of values."),f(x(l).length===1,"Each key-value pair must be (respectively) a string and a 1-dimensional array of values."),i.isEmpty())i.values=ve([l]),i.columns=[c],u=i.shape;else{f(l.length===u[0],`Column "${c}" in the new data is not the same length as the other columns in the original DataFrame.`);let p=i.columns.indexOf(c);p<0&&(i.columns.push(c),p=i.columns.indexOf(c)),i.values.forEach((q,U)=>{q[p]=l[U]})}}),i}}apply(e,t){t=t||0,f(cs(e),"The first parameter to the `apply` method must be a function."),f(t===0||t===1,"The second parameter to the `apply` method (the `axis`) must be 0 or 1.");let r=this;if(t===0){let o=ve(r.values).map((i,u)=>{let c=new I(i);return c.name=r.columns[u],c.index=r.index,e(c,u,r)});if(x(o).length===1){let i=new I(o);return i.index=D(r.columns),i}else{let i=new w(ve(o));return i.index=D(r.index),i.columns=D(r.columns),i}}else if(t===1){let s=r.values.map((o,i)=>{let u=new I(o);return u.name=r.index[i],u.index=r.columns,e(u,i,r)});if(x(s).length===1){let o=new I(s);return o.index=D(r.index),o}else{let o=new w(s);return o.index=D(r.index),o.columns=D(r.columns),o}}}map(e,t){return this.apply(e,t)}dropMissing(e,t,r){e=e||0,f(e===0||e===1,"The first parameter of the `dropMissing` method (the `axis`) must be 0 or 1."),r=r||0,f(Fe(r),"The third parameter of the `dropMissing` method (the `threshold`) should be a whole number (meaning that data should be dropped if it contains more than `threshold` null values)."),t=r>0?"none":t||"any",f(t==="any"||t==="all"||t==="none","The second parameter of the `dropMissing` method (the `condition` parameter, which indicates the condition under which data should be dropped) should be 'any' or 'all' (meaning that if 'any' of the data contains null values, then it should be dropped; or that if 'all' of the data contains null values, then it should be dropped).");function s(c){if(r>0){let l=0;for(let p=0;p<c.length;p++){let q=c[p];if(T(q)&&l++,l>=r)return[]}}else if(t==="any")for(let l=0;l<c.length;l++){let p=c[l];if(T(p))return[]}else if(t==="all"){for(let l=0;l<c.length;l++){let p=c[l];if(!T(p))return c}return[]}return c}let i=this.copy(),u=Math.random().toString();if(e===0){i=i.assign(u,i.index);let c=i.values.map(s).filter(p=>p.length>0);if(x(c).length<2)return new w;i.values=c;let l=i.get(null,u);if(T(l))return new w;E(l)&&(l=[l]),le(l)&&(l=l.values),i.index=l,i=i.drop(null,u)}else if(e===1){i=i.transpose(),i=i.assign(u,i.index);let c=i.values.map(s).filter(p=>p.length>0);if(x(c).length<2)return new w;i.values=c;let l=i.get(null,u);if(T(l))return new w;E(l)&&(l=[l]),le(l)&&(l=l.values),i.index=l,i=i.drop(null,u),i=i.transpose()}return i}dropNaN(e,t,r){e=e||0,f(e===0||e===1,"The first parameter of the `dropNaN` method (the `axis`) must be 0 or 1."),r=r||0,f(Fe(r),"The third parameter of the `dropNaN` method (the `threshold`) should be a whole number (meaning that data should be dropped if it contains more than `threshold` NaN values)."),t=r>0?"none":t||"any",f(t==="any"||t==="all"||t==="none","The second parameter of the `dropNaN` method (the `condition` parameter, which indicates the condition under which data should be dropped) should be 'any' or 'all' (meaning that if 'any' of the data contains NaN values, then it should be dropped; or that if 'all' of the data contains NaN values, then it should be dropped).");function s(c){let l=Da(c);return r>0?c.length-l.length<r:t==="any"?l.length===c.length:t==="all"?l.length>0:!0}let i=this.copy(),u=Math.random().toString();if(e===0){let c=i.index.filter(l=>{let p=i.get(l,null).values;return s(p)});return c.length>0?i.get(c,null):new w}else if(e===1){let c=i.columns.filter(l=>{let p=i.get(null,l).values;return s(p)});return c.length>0?i.get(null,c):new w}return i}drop(e,t){let r=this;T(e)&&(e=[]),T(t)&&(t=[]),(E(e)||W(e))&&(e=[e]),(E(t)||W(t))&&(t=[t]),f(O(e),"The `drop` method only works on 1-dimensional arrays of numerical indices and/or strings."),f(O(t),"The `drop` method only works on 1-dimensional arrays of numerical indices and/or strings."),f(x(e).length===1,"The `drop` method only works on 1-dimensional arrays of numerical indices and/or strings."),f(x(t).length===1,"The `drop` method only works on 1-dimensional arrays of numerical indices and/or strings.");let s,o;r.index.forEach((u,c)=>{e.indexOf(u)<0&&e.indexOf(c)<0&&(s||(s=[]),s.push(u))}),r.columns.forEach((u,c)=>{t.indexOf(u)<0&&t.indexOf(c)<0&&(o||(o=[]),o.push(u))});let i=r.get(s,o);if(le(i)){let u=new w;u=u.assign(i),r.index.indexOf(i.name)>-1&&(u=u.transpose()),i=u}return i}dropColumns(e){return this.drop(null,e)}dropRows(e){return this.drop(e,null)}toObject(){let e=this,t={};return e.values.forEach((r,s)=>{let o={};r.forEach((i,u)=>{o[e.columns[u]]=i}),t[e.index[s]]=o}),t}toCSVString(e){return rc(this,e)}toCSV(e,t){return nc(this,e,t)}print(){function e(q,U){return E(q)&&q.length>U?q.substring(0,U-3)+"...":q}let t=this;if(as(t.shape,[0]))return console.table({}),t;let r=typeof window=="undefined"?20:10,s=parseInt(r/2),o=typeof window=="undefined"?Math.floor(process.stdout.columns/24)-1:10,i=parseInt(o/2),u=r>t.index.length?null:Y(0,s).concat(Y(t.index.length-s,t.index.length)),c=o>t.columns.length?null:Y(0,i).concat(Y(t.columns.length-i,t.columns.length)),l=t.get(u,c);l instanceof I&&(t.shape[0]===1?(l=new w([l.values]),l.index=t.index,l.columns=new I(t.columns).get(c).values):t.shape[1]===1&&(l=new w([l.values]).transpose(),l.index=new I(t.index).get(u).values,l.columns=t.columns)),r<=t.index.length&&(l._index.splice(s,0,"..."),l._values.splice(s,0,Y(0,l.columns.length).map(q=>"..."))),o<=t.columns.length&&(l._columns.splice(i,0,"..."),l._values=l._values.map(q=>(q.splice(i,0,"..."),q)));let p=28;return l instanceof I?(l.values=l.values.map(q=>e(q,p)),l.name=e(l.name,p),l.index=l.index.map(q=>e(q,p))):(l.values=l.values.map(q=>q.map(U=>e(U,p))),l.columns=l.columns.map(q=>e(q,p)),l.index=l.index.map(q=>e(q,p))),console.table(l.toObject()),t}sort(e,t){let s=this.copy(),o=Ha().toString();return s=s.assign(o,s.index),T(e)&&(e=[o],t=[!0]),(W(e)||E(e))&&(e=[e],(Ot(t)||E(t))&&(t=[t])),f(O(e),"The first parameter of the `sort` method must be (1) a string or index representing a column name or index, respectively; (2) a 1-dimensional array of strings and/or indices; or (3) null."),f(x(e).length===1,"The first parameter of the `sort` method must be (1) a string or index representing a column name or index, respectively; (2) a 1-dimensional array of strings and/or indices; or (3) null."),T(t)&&(t=Y(0,e.length).map(i=>!0)),f(O(t),"The second parameter of the `sort` method must be (1) a string or boolean representing the sort direction ('ascending' / 'descending', or true / false); (2) a 1-dimensional array of strings and/or booleans; or (3) null."),f(x(t).length===1,"The second parameter of the `sort` method must be (1) a string or boolean representing the sort direction ('ascending' / 'descending', or true / false); (2) a 1-dimensional array of strings and/or booleans; or (3) null."),f(e.length===t.length,"The arrays passed into the `sort` method must be equal in length."),e=e.map(i=>{if(f(E(i)||W(i),"Column references can either be column names (as strings) or column indices (as whole numbers)."),E(i)){let u=s.columns.indexOf(i);return f(u>-1,`The column "${i}" does not exist!`),u}if(W(i))return f(parseInt(i)===i,"Column indices must be whole numbers!"),f(i>=0,`The column index ${i} is out of bounds!`),f(i<s.columns.length,`The index ${i} is out of bounds!`),i}),t=t.map(i=>{if(f(E(i)||Ot(i),"Direction references can either be strings ('ascending' or 'descending') or booleans (true or false)."),E(i)){let u=i.trim().toLowerCase();return f(u==="ascending"||u==="descending","Direction references can either be strings ('ascending' or 'descending') or booleans (true or false)."),u==="ascending"}if(Ot(i))return i}),s.values=tc(s.values,(i,u)=>{let c=0;for(;i[e[c]]===u[e[c]]&&c<e.length;)c++;let l=t[c];if(i[e[c]]===u[e[c]])return 0;if(i[e[c]]<u[e[c]])return l?-1:1;if(i[e[c]]>u[e[c]])return l?1:-1}),s.index=_(s.get(null,o).values),s=s.dropColumns(o),s}sortByIndex(){return this.sort()}filter(e,t){f(cs(e),"The `filter` method takes a single parameter: a function that is used to filter the values."),T(t)&&(t=0),f(t===0||t===1,"The `axis` parameter to the `filter` method must be 0 or 1.");let r=this,s=r.copy();if(s.isEmpty())return s;let o=fs(s.index),i=fs(s.columns);if(t===0){let u=s.values.filter((c,l)=>{let p=new I(c);p.name=r.index[l],p.index=r.columns;let q=e(p,l,r);return q||delete o[s.index[l]],q});if(_(u).length===0)return new w;if(u.length===1){let c=new I(_(u));return c.name=fe(o)[0],c.index=fe(i),c}s.values=u,s.index=fe(o)}else if(t===1){s=s.transpose();let u=s.values.filter((c,l)=>{let p=new I(c);p.name=r.columns[l],p.index=r.index;let q=e(p,l,r);return q||delete i[s.index[l]],q});if(_(u).length===0)return new w;if(u.length===1){let c=new I(_(u));return c.name=fe(i)[0],c.index=fe(o),c}s.values=u,s.index=fe(i),s=s.transpose()}return s}shuffle(e){return ic(this,e)}};w.fromCSV=function(){return sc(w,...arguments)};w.fromCSVString=function(){return oc(w,...arguments)};hs.exports=w});var qs=a((Ph,gs)=>{var ms=m(),ds=g(),ps=v();function cc(n,e){ms(ds(n),"You must pass two arrays into the `diff` function!"),ms(ds(e),"You must pass two arrays into the `diff` function!");let t=ps(n),r=ps(e),s=[];return t.forEach(o=>{r.indexOf(o)<0&&s.push(o)}),s}gs.exports=cc});var Qe=a((_h,bs)=>{var ys=h(),lc=b();function fc(n,e){try{return ys(n)?ys(e)?Math.pow(n,e):NaN:NaN}catch{return NaN}}bs.exports=lc(fc)});var Xe=a((Bh,Ns)=>{var hc=de(),mc=v();function dc(n){try{return hc(...mc(n))}catch{return NaN}}Ns.exports=dc});var St=a((Jh,ws)=>{var pc=h(),gc=b();function qc(){try{let n=1,e=Object.values(arguments);for(let t=0;t<e.length;t++){if(!pc(e[t]))return NaN;n*=e[t]}return n}catch{return NaN}}ws.exports=gc(qc)});var he=a((Lh,xs)=>{var yc=St();function bc(n,e){return yc(n,e)}xs.exports=bc});var At=a((Rh,vs)=>{var Nc=de(),wc=he();function xc(n,e){return Nc(n,wc(e,-1))}vs.exports=xc});var Os=a((Kh,Ts)=>{var vc=Qe(),Tc=Xe(),Oc=Ve(),Sc=At();function Ac(n,e){try{return Oc(Tc(vc(Sc(n,e),2)))}catch{return NaN}}Ts.exports=Ac});var As=a((Wh,Ss)=>{var Ec=he(),Mc=Qe();function Ic(n,e){return Ec(n,Mc(e,-1))}Ss.exports=Ic});var Et=a((Qh,Us)=>{var Te=m(),Es=d(),Ms=g(),jc=h(),Fh=re(),Is=v(),js=S(),Vc=Xe(),Uc=he(),Vs=ne();function Ge(n,e){Te(!Es(n)&&!Es(e),"You must pass two arrays of numbers into the `dot` function!"),Te(Ms(n)&&Ms(e),"You must pass two arrays of numbers into the `dot` function!"),Is(n).concat(Is(e)).forEach(s=>{Te(jc(s),"One of the arrays you passed into the `dot` function contains non-numerical values!")});let t=js(n),r=js(e);if(Te(t.length<=2&&r.length<=2,"I'm not smart enough to know how to get the dot-product of arrays that have more than 2 dimensions. Sorry for the inconvenience! Please only pass 1- or 2-dimensional arrays into the `dot` function!"),Te(t[t.length-1]===r[0],`There's a dimension misalignment in the two arrays you passed into the \`dot\` function. (${t[t.length-1]} !== ${r[0]})`),t.length===1&&r.length===1)return Vc(Uc(n,e));if(t.length===1&&r.length===2)return Vs(e).map(s=>Ge(n,s));if(t.length===2&&r.length===1)return n.map(s=>Ge(s,e));if(t.length===2&&r.length===2){let s=Vs(e),o=[];for(let i=0;i<n.length;i++){let u=[];for(let c=0;c<s.length;c++)u.push(Ge(n[i],s[c]));o.push(u)}return o}}Us.exports=Ge});var zs=a((Xh,Cs)=>{var Ys=m(),Yc=g(),Cc=d(),zc=S();function kc(n){return Ys(Yc(n),"The value passed into the `dropMissing` function must be a one-dimensional array!"),Ys(zc(n).length===1,"The value passed into the `dropMissing` function must be a one-dimensional array!"),n.filter(e=>!Cc(e))}Cs.exports=kc});var Js=a((Gh,Bs)=>{var ks=m(),$s=d(),Ps=g(),$c=z(),_s=S();function Pc(n,e){ks(Ps(n)&&Ps(e),"The two items passed into the `dropMissingPairwise` function must be arrays!"),ks(_s(n).length===1&&_s(e).length===1,"The `dropMissingPairwise` function only works on one-dimensional arrays!");let t=[],r=[];for(let s=0;s<$c([n.length,e.length]);s++)!$s(n[s])&&!$s(e[s])&&(t.push(n[s]),r.push(e[s]));return[t,r]}Bs.exports=Pc});var Xs=a((Zh,Qs)=>{var Ls=m(),Rs=d(),Ks=g(),Ws=h(),_c=z(),Fs=S();function Bc(n,e){Ls(Ks(n)&&Ks(e),"The two items passed into the `dropNaNPairwise` function must be arrays!"),Ls(Fs(n).length===1&&Fs(e).length===1,"The `dropNaNPairwise` function only works on one-dimensional arrays!");let t=[],r=[];for(let s=0;s<_c([n.length,e.length]);s++)!Rs(n[s])&&Ws(n[s])&&!Rs(e[s])&&Ws(e[s])&&(t.push(n[s]),r.push(e[s]));return[t,r]}Qs.exports=Bc});var Zs=a((Hh,Gs)=>{var Jc=b(),Lc=h();function Rc(n){try{return Lc(n)?Math.exp(n):NaN}catch{return NaN}}Gs.exports=Jc(Rc)});var eo=a((Dh,Ds)=>{var Kc=b();function Hs(n){try{return n!==parseInt(n)?NaN:n<=1?1:n*Hs(n-1)}catch{return NaN}}Ds.exports=Kc(Hs)});var no=a((em,to)=>{var Wc=h(),Fc=b();function Qc(n){try{let e=JSON.parse(n);return Wc(e)?e:NaN}catch{return NaN}}to.exports=Fc(Qc)});var Mt=a((tm,ro)=>{var Xc=h(),Gc=b();function Zc(n){try{let e=JSON.parse(n);return Xc(e)?parseInt(e):NaN}catch{return NaN}}ro.exports=Gc(Zc)});var io=a((nm,oo)=>{var F=m(),Hc=d(),It=g(),jt=h(),so=S(),Dc=Mt();function Vt(n,e){return F(!Hc(n),"You must pass an array and an index into the `getValueAt` function!"),F(It(n),"You must pass an array and an index into the `getValueAt` function!"),F(jt(e)||It(e),"The index passed into the `getValueAt` function must be a positive integer or a one-dimensional array of positive integers!"),It(e)&&(F(so(e).length===1,"The index passed into the `getValueAt` function must be a positive integer or a one-dimensional array of positive integers!"),e.forEach(t=>{F(jt(t)&&Dc(t)===t,"The index passed into the `getValueAt` function must be a positive integer or a one-dimensional array of positive integers!")}),F(e.length<=so(n).length,"The index passed into the `getValueAt` function has too many dimensions!")),jt(e)?(F(e<n.length,`The index ${e} is out of bounds!`),n[e]):e.length>1?(F(e[0]<n.length,`The index ${e[0]} is out of bounds!`),Vt(n[e[0]],e.slice(1))):Vt(n,e[0])}oo.exports=Vt});var Ut=a((om,uo)=>{var rm=k(),sm=$(),el=h(),tl=oe();function nl(n){el(n)&&(n=[n]);let e=[],t=1;n.forEach(r=>t*=r);for(let r=0;r<t;r++)e.push(0);return tl(e,n)}uo.exports=nl});var co=a((im,ao)=>{var Ze=m(),rl=d(),sl=h(),ol=Ut();function il(n){Ze(!rl(n),"You must pass an integer greater than 0 (representing the size) into the `identity` function!"),Ze(sl(n),"You must pass an integer greater than 0 (representing the size) into the `identity` function!"),Ze(parseInt(n)===n,"You must pass an integer greater than 0 (representing the size) into the `identity` function!"),Ze(n>0,"You must pass an integer greater than 0 (representing the size) into the `identity` function!");let e=ol([n,n]);for(let t=0;t<n;t++)e[t][t]=1;return e}ao.exports=il});var Yt=a((am,lo)=>{var um=m(),ul=X();function al(){return ul([...arguments])}lo.exports=al});var ho=a((cm,fo)=>{var cl=g(),ll=v(),fl=Yt();function hl(){let n=Object.values(arguments).map(r=>cl(r)?ll(r):[r]),e=[];return fl(n).forEach(r=>{for(let s=0;s<n.length;s++)if(n[s].indexOf(r)<0)return;e.push(r)}),e}fo.exports=hl});var zt=a((fm,go)=>{var Oe=m(),He=d(),mo=h(),Ct=g(),ml=Z(),dl=v(),lm=S(),pl=Re();function po(n,e){if(Oe(!He(n),"You must pass an array into the `slice` function!"),Oe(Ct(n),"You must pass an array into the `slice` function!"),He(e))return n.slice();Oe(Ct(e),"The indices passed into the `slice` function must be a one-dimensional array of integers or null values."),dl(e).forEach(s=>{Oe(He(s)||mo(s)&&pl(s)===s,"The indices passed into the `slice` function must be a one-dimensional array of integers or null values.")});let t=e[0];He(t)&&(t=ml(0,n.length)),mo(t)&&(t=[t]);let r=[];return t.forEach(s=>{Oe(s<n.length,"Index out of bounds in the `slice` function!"),s<0&&(s+=n.length);let o=n[s];Ct(o)?r.push(po(n[s],e.slice(1,e.length))):r.push(n[s])}),r}go.exports=po});var No=a((hm,bo)=>{var B=m(),gl=d(),ql=g(),kt=h(),yl=v(),bl=S(),De=zt(),Nl=Et(),qo=de(),yo=he(),$t=lt(),Q=Z();function Pt(n){B(!gl(n),"You must pass a square 2D array into the `inverse` function!"),B(ql(n),"You must pass a square 2D array into the `inverse` function!"),yl(n).forEach(t=>B(kt(t),"The array passed into the `inverse` function must contain only numbers!"));let e=bl(n);if(B(e.length===2,"The array passed into the `inverse` function must be exactly two-dimensional and square!"),B(e[0]===e[1],"The array passed into the `inverse` function must be exactly two-dimensional and square!"),B(e[0]>=0,"The array passed into the `inverse` function must be exactly two-dimensional and square!"),e[0]===0)return n;if(e[0]===1)return B(n[0][0]!==0,"This matrix cannot be inverted!"),1/n[0][0];if(e[0]===2){let t=n[0][0],r=n[0][1],s=n[1][0],o=n[1][1],i=t*o-r*s;B(i!==0,"This matrix cannot be inverted!");let u=[[o,-r],[-s,t]];return yo(u,1/i)}else if(e[0]>1){let t=(r,s)=>kt(r)||kt(s)?yo(r,s):Nl(r,s);for(let r=1;r<e[0]-1;r++)try{let s=De(n,[Q(0,r),Q(0,r)]),o=De(n,[Q(0,r),Q(r,e[0])]),i=De(n,[Q(r,e[0]),Q(0,r)]),u=De(n,[Q(r,e[0]),Q(r,e[0])]),c=Pt(s),l=Pt(qo(u,t(-1,t(t(i,c),o)))),p=qo(c,t(t(t(t(c,o),l),i),c)),q=t(-1,t(t(c,o),l)),U=t(-1,t(t(l,i),c)),M=l;return $t($t(p,q,1),$t(U,M,1),0)}catch{}B(!1,"This matrix cannot be inverted!")}}bo.exports=Pt});var xo=a((mm,wo)=>{var wl=b(),_t=h();function xl(n,e,t){try{return _t(n)?_t(e)?_t(t)?t*(e-n)+n:NaN:NaN:NaN}catch{return NaN}}wo.exports=wl(xl)});var Oo=a((dm,To)=>{var vo=h(),vl=d(),Tl=b();function Ol(n,e){try{return e=vl(e)?Math.E:e,vo(n)?vo(e)?Math.log(n)/Math.log(e):NaN:NaN}catch{return NaN}}To.exports=Tl(Ol)});var Ao=a((pm,So)=>{var Se=h(),Sl=b();function Al(n,e,t,r,s){try{return Se(n)?Se(e)?Se(t)?Se(r)?Se(s)?(s-r)*(n-e)/(t-e)+r:NaN:NaN:NaN:NaN:NaN}catch{return NaN}}So.exports=Sl(Al)});var Mo=a((Nm,Eo)=>{var gm=m(),qm=d(),ym=g(),bm=h(),El=v(),Ml=ae(),Il=Ce();function jl(n){try{let e=El(n),t=Il(e);if(t.length===0)return NaN;if(t.length<e.length)return NaN;t=Ml(t);let r;return t.length%2===0?r=(t[t.length/2-1]+t[t.length/2])/2:r=t[Math.floor(t.length/2)],r}catch{return NaN}}Eo.exports=jl});var Vo=a((wm,jo)=>{var Vl=v(),Ul=Ye(),Yl=X(),Io=ae();function Cl(n){try{if(n.length===0)return NaN;let e=Vl(n);if(e.length===0)return NaN;let t={},r=Yl(e);r.forEach(u=>{t[u]=Ul(e,u)});let s=Io(r,(u,c)=>t[c]-t[u]),o=s[0],i=Io(s.filter(u=>t[u]===t[o]));return i.length===1?i[0]:i}catch{return NaN}}jo.exports=Cl});var zo=a((Tm,Co)=>{var zl=d(),xm=k(),vm=$(),{random:Uo}=ie(),kl=oe(),$l=h();function Yo(){let n=Uo(),e=Uo();return Math.sqrt(-2*Math.log(n))*Math.cos(2*Math.PI*e)}function Pl(n){if(zl(n))return Yo();$l(n)&&(n=[n]);let e=[],t=1;n.forEach(r=>t*=r);for(let r=0;r<t;r++)e.push(Yo());return kl(e,n)}Co.exports=Pl});var $o=a((Am,ko)=>{var Om=k(),Sm=$(),_l=oe(),Bl=h();function Jl(n){Bl(n)&&(n=[n]);let e=[],t=1;n.forEach(r=>t*=r);for(let r=0;r<t;r++)e.push(1);return _l(e,n)}ko.exports=Jl});var Bo=a((Em,_o)=>{var Po=g(),Ll=h(),et=m(),Rl=d();function Bt(n,e){if(et(Po(n),"The `permute` function only works on arrays!"),Rl(e)&&(e=n.length),et(Ll(e),"`r` must be a whole number!"),e>n.length)return Bt(n);if(e<=0)return[[]];if(et(e===parseInt(e),"`r` must be a whole number!"),n.length<2)return n;let t=[];return n.forEach((r,s)=>{et(!Po(r),"It is not recommended to permute arrays of arrays. Weird things happen, and I haven't figured out how to account for such a scenario yet. A possible workaround is: convert each sub-array to a string (using `JSON.stringify`), get the permutations using the array of strings, and then convert each string in each combination back to a sub-array (using `JSON.parse`).");let o=n.slice(0,s),i=n.slice(s+1),u=o.concat(i);Bt(u,e-1).forEach(l=>{t.push([r].concat(l))})}),t}_o.exports=Bt});var Ko=a((Mm,Ro)=>{var Kl=g(),Wl=S(),Jo=Pe(),Lo=$e();function Fl(){Object.keys(arguments).forEach(n=>{let e=arguments[n];if(Kl(e)){let t=Wl(e);t.length===1?new Lo(e).print():t.length==2?new Jo(e).print():console.log(e)}else e instanceof Jo||e instanceof Lo?e.print():console.log(e)})}Ro.exports=Fl});var Fo=a((Im,Wo)=>{var Ql=h(),Xl=b();function Gl(n){try{return Ql(n)?Math.round(n):NaN}catch{return NaN}}Wo.exports=Xl(Gl)});var Jt=a((jm,Go)=>{var Qo=m(),Zl=h(),Xo=g(),Hl=se();function Dl(n,e,t){Qo(Xo(n),"The first argument passed into the `setValueAt` function must be an array!"),Zl(e)&&(e=[e]),Qo(Xo(e),"The second argument passed into the `setValueAt` function must be an integer or an array of integers!");let r=Hl(n),s=r;for(let o=0;o<e.length-1;o++)s=s[e[o]];return s[e[e.length-1]]=t,r}Go.exports=Dl});var Ho=a((Vm,Zo)=>{var ef=h(),tf=b();function nf(n){try{return ef(n)?n<0?-1:n>0?1:0:NaN}catch{return NaN}}Zo.exports=tf(nf)});var ei=a((Um,Do)=>{var rf=h(),sf=b();function of(n){try{return rf(n)?Math.sin(n):NaN}catch{return NaN}}Do.exports=sf(of)});var ni=a((Ym,ti)=>{var uf=Ue();function af(n){return uf(n)}ti.exports=af});var si=a((Cm,ri)=>{var cf=h(),lf=b();function ff(n){try{return cf(n)?Math.tan(n):NaN}catch{return NaN}}ri.exports=lf(ff)});var tt=a((zm,ii)=>{var oi=L();function hf(n,e){assert(oi(n),"`fn` must be a function!");let t=new Date;return e?n(...e):n(),new Date-t}async function mf(n,e){assert(oi(n),"`fn` must be a function!");let t=new Date;return e?await n(...e):await n(),new Date-t}ii.exports={timeSync:hf,timeAsync:mf}});var ci=a((km,ai)=>{var ui=m(),df=g(),pf=L(),gf=$(),qf=ye(),yf=Jt(),bf=v();function Nf(n,e){ui(df(n),"The first argument passed into the `where` function must be an array!"),ui(pf(e),"The second argument passed into the `where` function must be a function!");let t=bf(n).length,r=gf(n,e),s=[],o=0,i=!1;for(;!i;){let u=qf(r,!0);u?(s[o]=u,r=yf(r,u,null),o++):i=!0}return o===0?null:s}ai.exports=Nf});var wf=a(($m,Lt)=>{var Ae={abs:ut(),add:de(),append:lt(),apply:$(),arccos:xn(),arcsin:Tn(),arctan:Sn(),argmax:Cn(),argmin:$n(),assert:m(),ceil:_n(),chop:Ln(),clamp:Kn(),cohensd:Zn(),combine:tr(),copy:se(),correl:lr(),cos:hr(),count:Ye(),covariance:dt(),DataFrame:Pe(),diff:qs(),distance:Os(),divide:As(),dot:Et(),dropMissing:zs(),dropMissingPairwise:Js(),dropNaN:Ce(),dropNaNPairwise:Xs(),exp:Zs(),factorial:eo(),flatten:v(),float:no(),floor:Re(),getValueAt:io(),identity:co(),indexOf:ye(),int:Mt(),intersect:ho(),inverse:No(),isArray:g(),isBoolean:ue(),isEqual:re(),isFunction:L(),isNumber:h(),isObject:_e(),isString:G(),isUndefined:d(),lerp:xo(),log:Oo(),map:Ao(),MathError:te(),max:z(),mean:be(),median:Mo(),min:Me(),mode:Vo(),multiply:St(),ndarray:k(),normal:zo(),ones:$o(),permute:Bo(),pow:Qe(),print:Ko(),random:ie().random,range:Z(),reshape:oe(),reverse:pe(),round:Fo(),scale:he(),seed:ie().seed,Series:$e(),set:X(),setValueAt:Jt(),shape:S(),shuffle:Tt(),sign:Ho(),sin:ei(),slice:zt(),sort:ae(),sqrt:Ve(),std:Ue(),stdev:ni(),subtract:At(),sum:Xe(),tan:si(),time:tt().timeSync,timeSync:tt().timeSync,timeAsync:tt().timeAsync,transpose:ne(),union:Yt(),variance:Ie(),vectorize:b(),where:ci(),zeros:Ut(),dump:function(){Object.keys(Ae).forEach(n=>{typeof global!="undefined"&&(global[n]=Ae[n]),typeof window!="undefined"&&(window[n]=Ae[n])})}};typeof Lt!="undefined"&&(Lt.exports=Ae);typeof window!="undefined"&&(window.JSMathTools=Ae)});wf();})();
