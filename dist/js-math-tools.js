(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
let out={downloadCanvas:require("./download-canvas.js"),Plot:require("./plot.js")};module.exports=out;

},{"./download-canvas.js":2,"./plot.js":3}],2:[function(require,module,exports){
function downloadCanvas(e,a){let n=document.createElement("a");n.href=e.toDataURL(),n.download=a,n.dispatchEvent(new MouseEvent("click"))}module.exports=downloadCanvas;

},{}],3:[function(require,module,exports){
let map=require("../math/map.js"),max=require("../math/max.js"),downloadCanvas=require("./download-canvas.js"),assert=require("../misc/assert.js"),isUndefined=require("../math/is-undefined.js"),isNumber=require("../math/is-number.js"),isString=require("../math/is-string.js"),isBoolean=require("../math/is-boolean.js"),isArray=require("../math/is-array.js"),isEqual=require("../math/is-equal.js"),shape=require("../math/shape.js"),flatten=require("../math/flatten.js"),distrib=require("../math/distrib.js"),scale=require("../math/scale.js");function Plot(e){assert(!isUndefined(e),"You must pass an HTML5 canvas element into the `Plot` constructor!"),assert("HTMLCanvasElement"===e.constructor.name,"You must pass an HTML5 canvas element into the `Plot` constructor!");let t=this,s=-1,a=1,o=-1,n=1,i="black",r="black",l=5,u=1,m=!0,d={family:"monospace",size:12,alignment:"center",baseline:"middle",isBold:!1,isItalicized:!1,lineHeight:14,color:"black"},h=e.getContext("2d"),p=e.width,f=e.height;t.setOpacity=function(e){return assert(!isUndefined(e),"You must pass a number between 0 and 1 into the plot's `setOpacity` method!"),assert(isNumber(e),"You must pass a number between 0 and 1 into the plot's `setOpacity` method!"),assert(e>=0&&e<=1,"You must pass a number between 0 and 1 into the plot's `setOpacity` method!"),h.globalAlpha=e,t},t.setFillColor=function(e){return assert(!isUndefined(e),"You must pass a color string into the plot's `setFillColor` method!"),assert(isString(e),"You must pass a color string into the plot's `setFillColor` method!"),i=e,t},t.setLineColor=function(e){return assert(!isUndefined(e),"You must pass a color string into the plot's `setLineColor` method!"),assert(isString(e),"You must pass a color string into the plot's `setLineColor` method!"),r=e,t},t.setDotSize=function(e){return assert(!isUndefined(e),"You must pass a positive number into the plot's `setDotSize` method!"),assert(isNumber(e),"You must pass a positive number into the plot's `setDotSize` method!"),assert(e>=0,"You must pass a positive number into the plot's `setDotSize` method!"),l=e,t},t.setLineThickness=function(e){return assert(!isUndefined(e),"You must pass a positive number into the plot's `setLineThickness` method!"),assert(isNumber(e),"You must pass a positive number into the plot's `setLineThickness` method!"),assert(e>=0,"You must pass a positive number into the plot's `setLineThickness` method!"),u=e,t},t.setAxesAreVisible=function(e){return assert(!isUndefined(e),"You must pass a boolean value into the plot's `setAxesAreVisible` method!"),assert(isBoolean(e),"You must pass a boolean value into the plot's `setAxesAreVisible` method!"),m=e,t},t.setTextStyle=function(e){return assert(!isUndefined(e),"You must pass a text style string into the plot's `setTextStyle` method!"),d=e,t},t.setRange=function(e,i,r,l){return assert(!isUndefined(e),"You must pass four numbers into the plot's `setRange` method!"),assert(!isUndefined(i),"You must pass four numbers into the plot's `setRange` method!"),assert(!isUndefined(r),"You must pass four numbers into the plot's `setRange` method!"),assert(!isUndefined(l),"You must pass four numbers into the plot's `setRange` method!"),assert(isNumber(e),"You must pass four numbers into the plot's `setRange` method!"),assert(isNumber(i),"You must pass four numbers into the plot's `setRange` method!"),assert(isNumber(r),"You must pass four numbers into the plot's `setRange` method!"),assert(isNumber(l),"You must pass four numbers into the plot's `setRange` method!"),assert(e<i,"The xmin value must be less than the xmax value in the plot's `setRange` method!"),assert(r<l,"The ymin value must be less than the ymax value in the plot's `setRange` method!"),s=e,a=i,o=r,n=l,t},t.splitTextIntoLines=function(e,t){assert(!isUndefined(e),"You must pass a string and a positive number into the plot's `splitTextIntoLines` method!"),assert(isString(e),"You must pass a string and a positive number into the plot's `splitTextIntoLines` method!"),assert(!isUndefined(t),"You must pass a string and a positive number into the plot's `splitTextIntoLines` method!"),assert(isNumber(t),"You must pass a string and a positive number into the plot's `splitTextIntoLines` method!"),assert(t>=0,"You must pass a string and a positive number into the plot's `splitTextIntoLines` method!");let s=[],a=e.split(" "),o="";return a.forEach(function(e){h.measureText(o+" "+e).width>t?(s.push(o),o=e):0===o.length?o+=e:o+=" "+e}),o.length>0&&s.push(o),s},t.clear=function(){return h.clearRect(0,0,p,f),h.fillStyle="white",h.fillRect(0,0,p,f),t},t.drawAxes=function(){return m&&(h.fillStyle="none",h.strokeStyle="black",h.lineWidth=1,h.beginPath(),h.moveTo(-p/2,map(0,o,n,-f/2,f/2)),h.lineTo(p/2,map(0,o,n,-f/2,f/2)),h.stroke(),h.beginPath(),h.moveTo(map(0,s,a,-p/2,p/2),-f/2),h.lineTo(map(0,s,a,-p/2,p/2),f/2),h.stroke()),t},t.scatter=function(e,m){assert(!isUndefined(e),"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `scatter` method!"),assert(!isUndefined(m),"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `scatter` method!"),assert(isArray(e),"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `scatter` method!"),assert(isArray(m),"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `scatter` method!");let d=shape(e),y=shape(m);assert(d.length<2,"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `scatter` method!"),assert(y.length<2,"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `scatter` method!"),assert(isEqual(d,y),"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `scatter` method!"),h.save(),h.translate(p/2,f/2),h.scale(1,-1),t.drawAxes(),h.fillStyle=i,h.strokeStyle=r,h.lineWidth=u;for(let t=0;t<e.length;t++)xTemp=map(e[t],s,a,-p/2,p/2),yTemp=map(m[t],o,n,-f/2,f/2),h.beginPath(),h.ellipse(xTemp,yTemp,l/2,l/2,0,0,2*Math.PI),"none"!==i&&h.fill(),u>0&&h.stroke();return h.restore(),t},t.line=function(e,l){assert(!isUndefined(e),"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `line` method!"),assert(!isUndefined(l),"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `line` method!"),assert(isArray(e),"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `line` method!"),assert(isArray(l),"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `line` method!");let m=shape(e),d=shape(l);assert(m.length<2,"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `line` method!"),assert(d.length<2,"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `line` method!"),assert(isEqual(m,d),"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `line` method!"),h.save(),h.translate(p/2,f/2),h.scale(1,-1),t.drawAxes(),h.fillStyle=i,h.strokeStyle=r,h.lineWidth=u;for(let t=0;t<e.length-1;t++)xTemp1=map(e[t],s,a,-p/2,p/2),yTemp1=map(l[t],o,n,-f/2,f/2),xTemp2=map(e[t+1],s,a,-p/2,p/2),yTemp2=map(l[t+1],o,n,-f/2,f/2),h.beginPath(),h.moveTo(xTemp1,yTemp1),h.lineTo(xTemp2,yTemp2),h.stroke();return h.restore(),t},t.dottedLine=function(e,l){assert(!isUndefined(e),"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `dottedLine` method!"),assert(!isUndefined(l),"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `dottedLine` method!"),assert(isArray(e),"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `dottedLine` method!"),assert(isArray(l),"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `dottedLine` method!");let m=shape(e),d=shape(l);assert(m.length<2,"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `dottedLine` method!"),assert(d.length<2,"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `dottedLine` method!"),assert(isEqual(m,d),"You must pass two equally-sized one-dimensional arrays of numbers into the plot's `dottedLine` method!"),h.save(),h.translate(p/2,f/2),h.scale(1,-1),t.drawAxes(),h.fillStyle=i,h.strokeStyle=r,h.lineWidth=u;for(let t=0;t<e.length-1;t+=2)try{xTemp1=map(e[t],s,a,-p/2,p/2),yTemp1=map(l[t],o,n,-f/2,f/2),xTemp2=map(e[t+1],s,a,-p/2,p/2),yTemp2=map(l[t+1],o,n,-f/2,f/2),h.beginPath(),h.moveTo(xTemp1,yTemp1),h.lineTo(xTemp2,yTemp2),h.stroke()}catch(e){}return h.restore(),t},t.bar=function(e,i){assert(!isUndefined(e),"You must pass two equally-sized one-dimensional arrays into the plot's `bar` method: an array of numeric values and array of color strings!"),assert(!isUndefined(i),"You must pass two equally-sized one-dimensional arrays into the plot's `bar` method: an array of numeric values and array of color strings!"),assert(isArray(e),"You must pass two equally-sized one-dimensional arrays into the plot's `bar` method: an array of numeric values and array of color strings!"),assert(isArray(i),"You must pass two equally-sized one-dimensional arrays into the plot's `bar` method: an array of numeric values and array of color strings!");let l=shape(e),m=shape(i);assert(l.length<2,"You must pass two equally-sized one-dimensional arrays into the plot's `bar` method: an array of numeric values and array of color strings!"),assert(m.length<2,"You must pass two equally-sized one-dimensional arrays into the plot's `bar` method: an array of numeric values and array of color strings!"),assert(isEqual(l,m),"You must pass two equally-sized one-dimensional arrays into the plot's `bar` method: an array of numeric values and array of color strings!"),e.forEach(function(e){assert(isNumber(e),"You must pass two equally-sized one-dimensional arrays into the plot's `bar` method: an array of numeric values and array of color strings!")}),i.forEach(function(e){assert(isString(e),"You must pass two equally-sized one-dimensional arrays into the plot's `bar` method: an array of numeric values and array of color strings!")});let d=max(e);t.setRange(1,2+e.length,-.1*d,1.1*d),h.save(),h.translate(p/2,f/2),h.scale(1,-1),h.strokeStyle=r,h.lineWidth=u;for(let t=0;t<e.length;t++){h.fillStyle=i[t];let r=map(t+2-.25,s,a,-p/2,p/2),l=map(0,o,n,-f/2,f/2),m=map(.5,0,a-s,0,p),d=map(e[t],0,n-o,0,f);"none"!==i[t]&&h.fillRect(r,l,m,d),u>0&&h.strokeRect(r,l,m,d)}return t.drawAxes(),h.restore(),t},t.hist=function(e,l,m){assert(!isUndefined(e),"You must pass an array of numbers (and optionally an integer number of bins and a boolean that determines whether or not to display the histogram as a density plot) into the plot's `hist` method!"),assert(isArray(e),"You must pass an array of numbers (and optionally an integer number of bins and a boolean that determines whether or not to display the histogram as a density plot) into the plot's `hist` method!");let d=flatten(e);d.forEach(e=>assert(isNumber(e),"You must pass an array of numbers (and optionally an integer number of bins and a boolean that determines whether or not to display the histogram as a density plot) into the plot's `hist` method!")),isUndefined(l)?l=parseInt(Math.sqrt(d.length)):(assert(isNumber(l),"You must pass an array of numbers (and optionally an integer number of bins and a boolean that determines whether or not to display the histogram as a density plot) into the plot's `hist` method!"),assert(l===parseInt(l),"You must pass an array of numbers (and optionally an integer number of bins and a boolean that determines whether or not to display the histogram as a density plot) into the plot's `hist` method!")),isUndefined(m)?m=!1:assert(isBoolean(m),"You must pass an array of numbers (and optionally an integer number of bins and a boolean that determines whether or not to display the histogram as a density plot) into the plot's `hist` method!");let y=distrib(d,l);h.save(),h.translate(p/2,f/2),h.scale(1,-1),t.drawAxes(),h.fillStyle=i,h.strokeStyle=r,h.lineWidth=u,d=apply(d,e=>map(e,s,a,-p/2,p/2));let b=min(d),c=max(d),g=(c-b)/l;e=range(b,c,g),y=apply(y,e=>map(e,0,n-o,0,f)),m&&(y=apply(y,e=>e/d.length));for(let t=0;t<e.length;t++)h.fillRect(e[t],map(0,o,n,-f/2,f/2),g,y[t]),h.strokeRect(e[t],map(0,o,n,-f/2,f/2),g,y[t]);return h.restore(),t},t.gkde=function(e,l,m,d){assert(!isUndefined(e),"You must pass an array of numbers (and optionally a numeric bandwidth value, a numeric scale value, and a numeric resolution value) into the plot's `gkde` method!"),assert(isArray(e),"You must pass an array of numbers (and optionally a numeric bandwidth value, a numeric scale value, and a numeric resolution value) into the plot's `gkde` method!");let y=flatten(e);y.forEach(e=>assert(isNumber(e),"You must pass an array of numbers (and optionally a numeric bandwidth value, a numeric scale value, and a numeric resolution value) into the plot's `gkde` method!")),isUndefined(l)?l=.5:assert(isNumber(l),"You must pass an array of numbers (and optionally a numeric bandwidth value, a numeric scale value, and a numeric resolution value) into the plot's `gkde` method!"),isUndefined(m)?m=1:assert(isNumber(m),"You must pass an array of numbers (and optionally a numeric bandwidth value, a numeric scale value, and a numeric resolution value) into the plot's `gkde` method!"),isUndefined(d)?d=50:assert(isNumber(d),"You must pass an array of numbers (and optionally a numeric bandwidth value, a numeric scale value, and a numeric resolution value) into the plot's `gkde` method!");let b=vectorize(function(e,t){return Math.exp(-e*e/(2*t*t))}),c=min(y),g=max(y),Y=(g-c)/d,w=function(e,t,s){return apply(e,e=>sum(b(scale(add(e,scale(t,-1)),1/s),s)))}(e=range(c-20*Y,g+20*Y,Y),y,l),x=min(w),v=max(w);w=apply(w,e=>map(e,x,v,0,m)),e=apply(e,e=>map(e,s,a,-p/2,p/2)),w=apply(w,e=>map(e,o,n,-f/2,f/2));let T=map(0,o,n,-f/2,f/2);h.save(),h.translate(p/2,f/2),h.scale(1,-1),t.drawAxes(),h.beginPath(),h.moveTo(e[0],T),h.lineTo(e[0],w[0]);for(let t=0;t<e.length;t++)h.lineTo(e[t],w[t]);return h.lineTo(e[e.length-1],T),h.fillStyle=i,h.strokeStyle=r,h.lineWidth=u,h.fill(),h.stroke(),h.restore(),t},t.text=function(e,i,r,l,u){let m;return assert(!isUndefined(e),"You must pass a string and two numbers for coordinates (and optionally a positive third number for the maximum width of the text) into the plot's `text` method!"),assert(!isUndefined(i),"You must pass a string and two numbers for coordinates (and optionally a positive third number for the maximum width of the text) into the plot's `text` method!"),assert(!isUndefined(r),"You must pass a string and two numbers for coordinates (and optionally a positive third number for the maximum width of the text) into the plot's `text` method!"),assert(isString(e),"You must pass a string and two numbers for coordinates (and optionally a positive third number for the maximum width of the text) into the plot's `text` method!"),assert(isNumber(i),"You must pass a string and two numbers for coordinates (and optionally a positive third number for the maximum width of the text) into the plot's `text` method!"),assert(isNumber(r),"You must pass a string and two numbers for coordinates (and optionally a positive third number for the maximum width of the text) into the plot's `text` method!"),isUndefined(u)||(assert(isNumber(u),"You must pass a string and two numbers for coordinates (and optionally a positive third number for the maximum width of the text) into the plot's `text` method!"),assert(u>=0,"You must pass a string and two numbers for coordinates (and optionally a positive third number for the maximum width of the text) into the plot's `text` method!")),h.save(),h.translate(p/2,f/2),h.rotate(l),h.scale(1,-1),h.fillStyle=d.color,h.font=`${d.isBold?"bold":""} ${d.isItalicized?"italic":""} ${d.size}px ${d.family}`,h.textAlign=d.alignment,h.textBaseline=d.baseline,(m=u?t.splitTextIntoLines(e,map(u,0,a-s,0,p)):[e]).forEach(function(e,t){h.save(),h.translate(map(i,s,a,-p/2,p/2),map(r,o,n,-f/2,f/2)-t*d.lineHeight),h.scale(1,-1),h.fillText(e,0,0),h.restore()}),h.restore(),t},t.getContext=function(){return h},t.download=function(s){return isUndefined(s)||assert(isString(s),"You must pass a string (or nothing at all) into the plot's `download` method!"),downloadCanvas(e,s=s||"untitled.png"),t}}module.exports=Plot;

},{"../math/distrib.js":23,"../math/flatten.js":25,"../math/is-array.js":29,"../math/is-boolean.js":30,"../math/is-equal.js":31,"../math/is-number.js":33,"../math/is-string.js":34,"../math/is-undefined.js":35,"../math/map.js":38,"../math/max.js":39,"../math/scale.js":52,"../math/shape.js":55,"../misc/assert.js":72,"./download-canvas.js":2}],4:[function(require,module,exports){
let out={canvas:require("./canvas/__index__.js"),math:require("./math/__index__.js"),misc:require("./misc/__index__.js"),dump:function(){out.misc.dump(out.canvas),out.misc.dump(out.math),out.misc.dump(out.misc)}};try{module.exports=out}catch(t){}try{window.JSMathTools=out}catch(t){}

},{"./canvas/__index__.js":1,"./math/__index__.js":5,"./misc/__index__.js":69}],5:[function(require,module,exports){
let out={abs:require("./abs.js"),add:require("./add.js"),append:require("./append.js"),arccos:require("./arccos.js"),arcsin:require("./arcsin.js"),arctan:require("./arctan.js"),ceil:require("./ceil.js"),chop:require("./chop.js"),clamp:require("./clamp.js"),cohensd:require("./cohens-d.js"),copy:require("./copy.js"),correl:require("./correl.js"),cos:require("./cos.js"),count:require("./count.js"),covariance:require("./covariance.js"),DataFrame:require("./dataframe.js"),distance:require("./distance.js"),distrib:require("./distrib.js"),dot:require("./dot.js"),flatten:require("./flatten.js"),floor:require("./floor.js"),identity:require("./identity.js"),inverse:require("./inverse.js"),isArray:require("./is-array.js"),isBoolean:require("./is-boolean.js"),isEqual:require("./is-equal.js"),isFunction:require("./is-function.js"),isNumber:require("./is-number.js"),isString:require("./is-string.js"),isUndefined:require("./is-undefined.js"),lerp:require("./lerp.js"),log:require("./log.js"),map:require("./map.js"),max:require("./max.js"),mean:require("./mean.js"),median:require("./median.js"),min:require("./min.js"),mode:require("./mode.js"),ndarray:require("./ndarray.js"),normal:require("./normal.js"),ones:require("./ones.js"),pow:require("./pow.js"),random:require("./random.js"),range:require("./range.js"),reverse:require("./reverse.js"),round:require("./round.js"),scale:require("./scale.js"),seed:require("./seed.js"),set:require("./set.js"),shape:require("./shape.js"),shuffle:require("./shuffle.js"),sign:require("./sign.js"),sin:require("./sin.js"),slice:require("./slice.js"),sort:require("./sort.js"),sqrt:require("./sqrt.js"),std:require("./std.js"),sum:require("./sum.js"),tan:require("./tan.js"),transpose:require("./transpose.js"),variance:require("./variance.js"),vectorize:require("./vectorize.js"),zeros:require("./zeros.js")};module.exports=out;

},{"./abs.js":6,"./add.js":7,"./append.js":8,"./arccos.js":9,"./arcsin.js":10,"./arctan.js":11,"./ceil.js":12,"./chop.js":13,"./clamp.js":14,"./cohens-d.js":15,"./copy.js":16,"./correl.js":17,"./cos.js":18,"./count.js":19,"./covariance.js":20,"./dataframe.js":21,"./distance.js":22,"./distrib.js":23,"./dot.js":24,"./flatten.js":25,"./floor.js":26,"./identity.js":27,"./inverse.js":28,"./is-array.js":29,"./is-boolean.js":30,"./is-equal.js":31,"./is-function.js":32,"./is-number.js":33,"./is-string.js":34,"./is-undefined.js":35,"./lerp.js":36,"./log.js":37,"./map.js":38,"./max.js":39,"./mean.js":40,"./median.js":41,"./min.js":42,"./mode.js":43,"./ndarray.js":44,"./normal.js":45,"./ones.js":46,"./pow.js":47,"./random.js":48,"./range.js":49,"./reverse.js":50,"./round.js":51,"./scale.js":52,"./seed.js":53,"./set.js":54,"./shape.js":55,"./shuffle.js":56,"./sign.js":57,"./sin.js":58,"./slice.js":59,"./sort.js":60,"./sqrt.js":61,"./std.js":62,"./sum.js":63,"./tan.js":64,"./transpose.js":65,"./variance.js":66,"./vectorize.js":67,"./zeros.js":68}],6:[function(require,module,exports){
let assert=require("../misc/assert.js"),vectorize=require("./vectorize.js"),isArray=require("./is-array.js"),isNumber=require("./is-number.js"),isUndefined=require("./is-undefined.js"),abs=vectorize(function(s){return assert(!isUndefined(s),"You must pass exactly one number into the `abs` function!"),assert(isNumber(s),"The `abs` function only works on numbers!"),Math.abs(s)});if(module.exports=abs,!module.parent&&"undefined"==typeof window){let s,e,a=abs(3);assert(3===a,`abs(3) should be 3, but instead is ${a}!`),a=abs(-3),assert(3===a,`abs(-3) should be 3, but instead is ${a}!`),a=abs(17.25),assert(17.25===a,`abs(17.25) should be 17.25, but instead is ${a}!`),a=abs(-101.5),assert(101.5===a,`abs(-101.5) should be 101.5, but instead is ${a}!`),x=[-2,3,-4],yTrue=[2,3,4],yPred=abs(x);for(let s=0;s<yTrue.length;s++)assert(yTrue[s]===yPred[s],`abs(${x[s]}) should be ${yTrue[s]}, but instead is ${yPred[s]}!`);x=[[1,-2,-3],[4,-5,6],[-7,8,-9]],yTrue=[[1,2,3],[4,5,6],[7,8,9]],yPred=abs(x);for(let s=0;s<yTrue.length;s++)for(let e=0;e<yTrue[s].length;e++)assert(yTrue[s][e]===yPred[s][e],`abs(${x[s][e]}) should be ${yTrue[s][e]}, but instead is ${yPred[s][e]}!`);try{s=!1,abs("foo")}catch(e){s=!0}assert(s,'abs("foo") should have failed!');try{s=!1,abs(["foo","bar","baz"])}catch(e){s=!0}assert(s,'abs(["foo", "bar", "baz"]) should have failed!');try{s=!1,abs({x:5})}catch(e){s=!0}assert(s,"abs({x: 5}) should have failed!");try{s=!1,abs(!0)}catch(e){s=!0}assert(s,"abs(true) should have failed!");try{s=!1,abs(e)}catch(e){s=!0}assert(s,"abs(foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-array.js":29,"./is-number.js":33,"./is-undefined.js":35,"./vectorize.js":67}],7:[function(require,module,exports){
let assert=require("../misc/assert.js"),vectorize=require("./vectorize.js"),isNumber=require("./is-number.js"),isString=require("./is-string.js"),isUndefined=require("./is-undefined.js"),add=vectorize(function(){let e=0,r=Object.keys(arguments).map(e=>arguments[e]),d=r.map(e=>typeof e);return r.forEach(e=>assert(isNumber(e)||isString(e),"The `add` function only works on strings or numbers!")),r.forEach(e=>assert(!isUndefined(e),"You must pass numbers or equally-sized arrays of numbers into the `add` function!")),d.indexOf("string")>-1&&(e=""),r.forEach(r=>e+=r),e});if(module.exports=add,!module.parent&&"undefined"==typeof window){let e,r,d=3,s=4;cTrue=d+s,cPred=add(d,s),assert(cTrue===cPred,`add(${d}, ${s}) should be ${cTrue}, but instead is ${cPred}!`),d=-4,s=22.5,cTrue=d+s,cPred=add(d,s),assert(cTrue===cPred,`add(${d}, ${s}) should be ${cTrue}, but instead is ${cPred}!`),d=[2,3,4],s=-10,cTrue=[-8,-7,-6],cPred=add(d,s);for(let e=0;e<cTrue.length;e++)assert(cTrue[e]===cPred[e],`add(${d[e]}, ${s}) should be ${cTrue[e]}, but instead is ${cPred[e]}!`);d=-10,s=[2,3,4],cTrue=[-8,-7,-6],cPred=add(d,s);for(let e=0;e<cTrue.length;e++)assert(cTrue[e]===cPred[e],`add(${d}, ${s[e]}) should be ${cTrue[e]}, but instead is ${cPred[e]}!`);d=[2,3,4],s=[5,6,7],cTrue=[7,9,11],cPred=add(d,s);for(let e=0;e<cTrue.length;e++)assert(cTrue[e]===cPred[e],`add(${d[e]}, ${s[e]}) should be ${cTrue[e]}, but instead is ${cPred[e]}!`);d=[[2,3,4],[5,6,7]],s=10,cTrue=[[12,13,14],[15,16,17]],cPred=add(d,s);for(let e=0;e<cTrue.length;e++)for(let r=0;r<cTrue[e].length;r++)assert(cTrue[e][r]===cPred[e][r],`add(${d[e][r]}, ${s}) should be ${cTrue[e][r]}, but instead is ${cPred[e][r]}!`);d=[[2,3,4],[5,6,7]],s=[10,20,30];try{e=!1,add(d,s)}catch(r){e=!0}e||assert(!1,`add(${d}, ${s}) should have failed!`),d="hello, ",s=["foo","bar","baz"],cTrue=["hello, foo","hello, bar","hello, baz"],cPred=add(d,s);for(let e=0;e<cTrue.length;e++)assert(cTrue[e]===cPred[e],`add(${d}, ${s[e]}) should be ${cTrue[e]}, but instead is ${cPred[e]}!`);d=!0,s=3;try{e=!1,add(d,s)}catch(r){e=!0}assert(e,`add(${d}, ${s}) should have failed!`),d=[2,3,4],s=[5,6,"seven"],cTrue=[7,9,"4seven"],cPred=add(d,s);for(let e=0;e<cTrue.length;e++)assert(cTrue[e]===cPred[e],`add(${d[e]}, ${s[e]}) should be ${cTrue[e]}, but instead was ${cPred[e]}!`);try{e=!1,add(3,r)}catch(r){e=!0}assert(e,"add(3, foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-number.js":33,"./is-string.js":34,"./is-undefined.js":35,"./vectorize.js":67}],8:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js"),isNumber=require("./is-number.js"),shape=require("./shape.js"),slice=require("./slice.js"),transpose=require("./transpose.js");function append(e,a,s=0){assert(!isUndefined(e),"You must pass two arrays into the `append` function!"),assert(!isUndefined(a),"You must pass two arrays into the `append` function!"),assert(isArray(e),"You must pass two arrays into the `append` function!"),assert(isArray(a),"You must pass two arrays into the `append` function!"),assert(isNumber(s),"The `axis` argument to the `append` function must be 0 or 1!"),assert(s>=0&&s<2,"The `axis` argument to the `append` function must be 0 or 1!"),assert(parseInt(s)===s,"The `axis` argument to the `append` function must be 0 or 1!");let r=shape(e),n=shape(a);assert(r.length===n.length,"The two arrays passed into the `append` function must have the same number of dimensions!"),assert(r.length<3&&n.length<3,"The two arrays passed into the `append` function must be 1- or 2-dimensional!");for(let e=0;e<r.length;e++)e!==s&&assert(r[e]===n[e],`The two arrays passed into the \`append\` function must have the same shapes along all axes *except* the axis along which they're being appended! (${r[e]} != ${n[e]})`);if(assert(s<r.length,"The axis argument you passed into the `append` function is out of bounds for the array!"),0===r.length)return[];if(1===r.length)return e.concat(a);if(2===r.length){if(0===s){let s=[];for(let a=0;a<r[0];a++)s.push(e[a]);for(let e=0;e<n[0];e++)s.push(a[e]);return s}if(1===s)return transpose(append(transpose(e),transpose(a),0))}}if(module.exports=append,!module.parent&&"undefined"==typeof window){let e=require("./is-equal.js"),a=require("./normal.js"),s=require("./range.js");function printArray(e){return`[${e.join(", ")}]`}let r,n=[2,3,4],t=[5,6,7],p=0,i=[2,3,4,5,6,7],o=append(n,t,p);assert(e(i,o),`append(${printArray(n)}, ${printArray(t)}) should be ${printArray(i)}, but instead was ${printArray(o)}!`),i=[[2,3,4],[5,6,7]],o=append(n=[[2,3,4]],t=[[5,6,7]],p=0),assert(e(i,o),`append(${printArray(n)}, ${printArray(t)}) should be ${printArray(i)}, but instead was ${printArray(o)}!`),i=[[2,3,4,5,6,7]],o=append(n=[[2,3,4]],t=[[5,6,7]],p=1),assert(e(i,o),`append(${printArray(n)}, ${printArray(t)}) should be ${printArray(i)}, but instead was ${printArray(o)}!`),o=append(n=slice(i=a([10,5]),[s(0,3),null]),t=slice(i,[s(3,10),null]),p=0),assert(e(i,o),"FAIL when appending 2D matrices on axis 0!"),o=append(n=slice(i=a([5,10]),[null,s(0,3)]),t=slice(i,[null,s(3,10)]),p=1),assert(e(i,o),"FAIL when appending 2D matrices on axis 1!");try{r=!1,append()}catch(e){r=!0}assert(r,"append() should have failed!");try{r=!1,append(a([2,3]),a([4,5]),0)}catch(e){r=!0}assert(r,"append(normal([2, 3]), normal([4, 5]), 0) should have failed!");try{r=!1,append(a([3,3]),a([3,2]),0)}catch(e){r=!0}assert(r,"append(normal([3, 3]), normal([3, 2]), 0) should have failed!");try{r=!1,append(a([3,2]),a([2,2]),1)}catch(e){r=!0}assert(r,"append(normal([3, 2]), normal([2, 2]), 1) should have failed!");try{r=!1,append(a([5,5],a([5,5])),2)}catch(e){r=!0}assert(r,"append(normal([5, 5]), normal([5, 5]), 2) should have failed!");try{r=!1,append(a([2,3,4]),a([2,3,4]),0)}catch(e){r=!0}assert(r,"append(normal([2, 3, 4]), normal([2, 3, 4]), 0) should have failed!"),console.log("All tests passed! (But I should probably make `append` compatible with (n > 2)-dimensional arrays!)")}

},{"../misc/assert.js":72,"./is-array.js":29,"./is-equal.js":31,"./is-number.js":33,"./is-undefined.js":35,"./normal.js":45,"./range.js":49,"./shape.js":55,"./slice.js":59,"./transpose.js":65}],9:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isNumber=require("./is-number.js"),vectorize=require("./vectorize.js"),arccos=vectorize(function(s){return assert(!isUndefined(s),"You must pass a number or an array of numbers into the `arccos` function!"),assert(isNumber(s),"You must pass a number or an array of numbers into the `arccos` function!"),assert(s>=-1&&s<=1,"The `arccos` function is only defined for -1 <= x <= 1!"),Math.acos(s)});if(module.exports=arccos,!module.parent&&"undefined"==typeof window){let s,e=require("./random.js"),a=0,r=Math.PI/2,c=arccos(a);assert(r===c,`arccos(${a}) should be ${r}, but instead is ${c}!`),r=0,c=arccos(a=1),assert(r===c,`arccos(${a}) should be ${r}, but instead is ${c}!`);try{s=!1,arccos()}catch(e){s=!0}assert(s,"arccos() should have failed!");try{s=!1,arccos("foo")}catch(e){s=!0}assert(s,'arccos("foo") should have failed!');try{s=!1,arccos(!0)}catch(e){s=!0}assert(s,"arccos(true) should have failed!");try{s=!1,arccos(-2)}catch(e){s=!0}assert(s,"arccos(-2) should have failed!");try{s=!1,arccos(2)}catch(e){s=!0}assert(s,"arccos(2) should have failed!");try{s=!1,arccos({})}catch(e){s=!0}assert(s,"arccos({}) should have failed!");try{s=!1,arccos(e(100))}catch(e){s=!0}assert(!s,"arccos(random(100)) should have succeeded!");try{s=!1,arccos(()=>{})}catch(e){s=!0}assert(s,"arccos(() => {}) should have failed!");try{let e;s=!1,arccos(e)}catch(e){s=!0}assert(s,"arccos(foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-number.js":33,"./is-undefined.js":35,"./random.js":48,"./vectorize.js":67}],10:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isNumber=require("./is-number.js"),vectorize=require("./vectorize.js"),arcsin=vectorize(function(s){return assert(!isUndefined(s),"You must pass a number or an array of numbers into the `arcsin` function!"),assert(isNumber(s),"You must pass a number or an array of numbers into the `arcsin` function!"),assert(s>=-1&&s<=1,"The `arcsin` function is only defined for -1 <= x <= 1!"),Math.asin(s)});if(module.exports=arcsin,!module.parent&&"undefined"==typeof window){let s,e=require("./random.js"),a=0,r=0,i=arcsin(a);assert(r===i,`arcsin(${a}) should be ${r}, but instead is ${i}!`),a=1,r=Math.PI/2,i=arcsin(a),assert(r===i,`arcsin(${a}) should be ${r}, but instead is ${i}!`);try{s=!1,arcsin()}catch(e){s=!0}assert(s,"arcsin() should have failed!");try{s=!1,arcsin("foo")}catch(e){s=!0}assert(s,'arcsin("foo") should have failed!');try{s=!1,arcsin(!0)}catch(e){s=!0}assert(s,"arcsin(true) should have failed!");try{s=!1,arcsin(-2)}catch(e){s=!0}assert(s,"arcsin(-2) should have failed!");try{s=!1,arcsin(2)}catch(e){s=!0}assert(s,"arcsin(2) should have failed!");try{s=!1,arcsin({})}catch(e){s=!0}assert(s,"arcsin({}) should have failed!");try{s=!1,arcsin(e(100))}catch(e){s=!0}assert(!s,"arcsin(random(100)) should have succeeded!");try{s=!1,arcsin(()=>{})}catch(e){s=!0}assert(s,"arcsin(() => {}) should have failed!");try{let e;s=!1,arcsin(e)}catch(e){s=!0}assert(s,"arcsin(foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-number.js":33,"./is-undefined.js":35,"./random.js":48,"./vectorize.js":67}],11:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isNumber=require("./is-number.js"),vectorize=require("./vectorize.js"),arctan=vectorize(function(a){return assert(!isUndefined(a),"You must pass a number or an array of numbers into the `arctan` function!"),assert(isNumber(a),"You must pass a number or an array of numbers into the `arctan` function!"),Math.atan(a)});if(module.exports=arctan,!module.parent&&"undefined"==typeof window){let a,e=require("./random.js"),t=0,r=0,s=arctan(t);assert(r===s,`arctan(${t}) should be ${r}, but instead is ${s}!`),t=1,r=Math.PI/4,s=arctan(t),assert(r===s,`arctan(${t}) should be ${r}, but instead is ${s}!`);try{a=!1,arctan()}catch(e){a=!0}assert(a,"arctan() should have failed!");try{a=!1,arctan("foo")}catch(e){a=!0}assert(a,'arctan("foo") should have failed!');try{a=!1,arctan(!0)}catch(e){a=!0}assert(a,"arctan(true) should have failed!");try{a=!1,arctan(-2)}catch(e){a=!0}assert(!a,"arctan(-2) should have succeeded!");try{a=!1,arctan(2)}catch(e){a=!0}assert(!a,"arctan(2) should have succeeded!");try{a=!1,arctan({})}catch(e){a=!0}assert(a,"arctan({}) should have failed!");try{a=!1,arctan(e(100))}catch(e){a=!0}assert(!a,"arctan(random(100)) should have succeeded!");try{a=!1,arctan(()=>{})}catch(e){a=!0}assert(a,"arctan(() => {}) should have failed!");try{let e;a=!1,arctan(e)}catch(e){a=!0}assert(a,"arctan(foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-number.js":33,"./is-undefined.js":35,"./random.js":48,"./vectorize.js":67}],12:[function(require,module,exports){
let assert=require("../misc/assert.js"),isNumber=require("./is-number.js"),isUndefined=require("./is-undefined.js"),vectorize=require("./vectorize.js"),ceil=vectorize(function(e){return assert(!isUndefined(e),"You must pass a single number or a single array of numbers into the `ceil` function!"),assert(isNumber(e),"The `ceil` function only works on numbers!"),Math.ceil(e)});if(module.exports=ceil,!module.parent&&"undefined"==typeof window){let e,s,i=3.5,t=4,l=ceil(i);assert(t===l,`ceil(${i}) should be ${t}, but instead was ${l}!`),t=4,l=ceil(i=3.25),assert(t===l,`ceil(${i}) should be ${t}, but instead was ${l}!`),t=-17,l=ceil(i=-17.2),assert(t===l,`ceil(${i}) should be ${t}, but instead was ${l}!`),t=[3,4,8],l=ceil(i=[2.5,3.4,7.9]);for(let e=0;e<t.length;e++)assert(t[e]===l[e],`ceil(${i[e]}) should be ${t[e]}, but instead was ${l[e]}!`);i="foo";try{e=!1,ceil(i)}catch(s){e=!0}assert(e,`ceil(${i}) should have failed!`),i=[!0,2,3];try{e=!1,ceil(i)}catch(s){e=!0}assert(e,`ceil(${i}) should have failed!`),i={x:5};try{e=!1,ceil(i)}catch(s){e=!0}assert(e,`ceil(${i}) should have failed!`);try{e=!1,ceil(s)}catch(s){e=!0}assert(e,"ceil(foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-number.js":33,"./is-undefined.js":35,"./vectorize.js":67}],13:[function(require,module,exports){
let assert=require("../misc/assert.js"),isNumber=require("./is-number.js"),isUndefined=require("./is-undefined.js"),abs=require("./abs.js"),vectorize=require("./vectorize.js"),chop=vectorize(function(e,s){return assert(!isUndefined(e),"You must pass a single number or a single array of numbers into the `chop` function!"),assert(isNumber(e),"The `chop` function only works on numbers!"),s=isUndefined(s)?1e-10:s,assert(isNumber(s),"The `chop` function only works on numbers!"),abs(e)<s?0:e});if(module.exports=chop,!module.parent&&"undefined"==typeof window){let e=1,s=chop(e);assert(1===s,`chop(1) should be 1, but instead is ${s}!`),s=chop(e=0),assert(0===s,`chop(0) should be 0, but instead is ${s}!`),s=chop(e=1e-15),assert(0===s,`chop(1e-15) should be 0, but instead is ${s}!`),s=chop(e=100),assert(100===s,`chop(100) should be 100, but instead is ${s}!`),s=chop(e=-100),assert(-100===s,`chop(-100) should be -100, but instead is ${s}!`),e=[1e-20,1e-15,1e-5];let o,t=[0,0,1e-5];yPred=chop(e);for(let e=0;e<t.length;e++)assert(t[e]===yPred[e],`chop(x[i]) should be ${t[e]}, but instead is ${yPred[e]}!`);e=[1,1,1],thresholds=[.1,1,10],t=[1,1,0],yPred=chop(e,thresholds);for(let e=0;e<t.length;e++)assert(t[e]===yPred[e],`chop(x[i]) should be ${t[e]}, but instead is ${yPred[e]}!`);try{o=!1,chop(!0)}catch(e){o=!0}assert(o,"chop(true) should have failed!");try{o=!1,chop({})}catch(e){o=!0}assert(o,"chop({}) should have failed!");try{o=!1,chop("foo")}catch(e){o=!0}assert(o,'chop("foo") should have failed!');try{o=!1,chop(()=>{})}catch(e){o=!0}assert(o,"chop(() => {})) should have failed!");try{o=!1,chop([1,2,"three"])}catch(e){o=!0}assert(o,'chop([1, 2, "three"]) should have failed!');try{let e;o=!1,chop(e)}catch(e){o=!0}assert(o,"chop(foo) should have failed!");try{o=!1,chop([2,3,4],[5,6,"seven"])}catch(e){o=!0}assert(o,'chop([2, 3, 4], [5, 6, "seven"]) should have failed!'),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./abs.js":6,"./is-number.js":33,"./is-undefined.js":35,"./vectorize.js":67}],14:[function(require,module,exports){
let assert=require("../misc/assert.js"),isNumber=require("./is-number.js"),isUndefined=require("./is-undefined.js"),vectorize=require("./vectorize.js"),clamp=vectorize(function(e,s,a){return assert(!isUndefined(e)&&!isUndefined(s)&&!isUndefined(a),"You must pass exactly three numbers (or three equally-sized arrays of numbers) into the `clamp` function!"),assert(isNumber(e),"The `clamp` function only works on numbers!"),assert(isNumber(s),"The `clamp` function only works on numbers!"),assert(isNumber(a),"The `clamp` function only works on numbers!"),assert(s<a,"The minimum parameter, a, must be less than the maximum parameter, b."),e<s?s:e>a?a:e});if(module.exports=clamp,!module.parent&&"undefined"==typeof window){let e=5,s=1,a=10,t=5,r=clamp(e,s,a);assert(t===r,`clamp(${e}, ${s}, ${a}) should be ${t}, but instead is ${r}!`),t=s=1,r=clamp(e=-100,s,a=10),assert(t===r,`clamp(${e}, ${s}, ${a}) should be ${t}, but instead is ${r}!`),t=a=10,r=clamp(e=999,s=1,a),assert(t===r,`clamp(${e}, ${s}, ${a}) should be ${t}, but instead is ${r}!`),t=[5,100,500],r=clamp(e=[0,100,1e3],s=5,a=500);for(let l=0;l<t.length;l++)assert(t[l]===r[l],`clamp(${e[l]}, ${s}, ${a}) should be ${t[l]}, but instead was ${r[l]}!`);t=[5,100,300],r=clamp(e=[0,100,1e3],s=[5,10,15],a=[100,200,300]);for(let l=0;l<t.length;l++)assert(t[l]===r[l],`clamp(${e[l]}, ${s[l]}, ${a[l]}) should be ${t[l]}, but instead was ${r[l]}.`);e=5,s=10,a=1;let l,n=!1;try{clamp(e,s,a)}catch(e){n=!0}assert(n,`clamp(${e}, ${s}, ${a}) should have failed!`),e="foo",s="bar",a="baz",n=!1;try{clamp(e,s,a)}catch(e){n=!0}assert(n,`clamp(${e}, ${s}, ${a}) should have failed!`),n=!1;try{clamp(l,l,l)}catch(e){n=!0}assert(n,"clamp(foo, foo, foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-number.js":33,"./is-undefined.js":35,"./vectorize.js":67}],15:[function(require,module,exports){
let mean=require("./mean.js"),sqrt=require("./sqrt.js"),variance=require("./variance.js");function cohensd(e,r){return(mean(e)-mean(r))/sqrt((variance(e)+variance(r))/2)}module.exports=cohensd;

},{"./mean.js":40,"./sqrt.js":61,"./variance.js":66}],16:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js");function copy(e){if("object"==typeof e){if(isUndefined(e))return e;if(isArray(e))return e.map(copy);{let o={};return Object.keys(e).forEach(function(s){o[s]=copy(e[s])}),o}}return e}if(module.exports=copy,!module.parent&&"undefined"==typeof window){let e=require("./normal.js"),o=require("./is-equal.js"),s=(e,o)=>e===o,i=(e,i)=>o(e,i)&&(!("object"==typeof e&&!isUndefined(e)&&!isUndefined(i))||!s(e,i));assert(i(234,copy(234)),"copy(234) failed!"),assert(i(!0,copy(!0)),"copy(true) failed!"),assert(i("foo",copy("foo")),'copy("foo") failed!'),assert(i([2,3,4],copy([2,3,4])),"copy([2, 3, 4]) failed!"),assert(i(void 0,copy(void 0)),"copy(undefined) failed!");let r=e([10,10,10]);assert(i(r,copy(r)),"copy(normal([10, 10, 10])) failed!"),assert(i(r={foo:e([5,5,5,5]),name:"Josh",position:{x:234.5,y:567.8,z:-890.1}},copy(r)),"copy(obj) failed!"),assert(i(r=(()=>{}),copy(r)),"copy(fn) failed!"),assert(i(r=null,copy(r)),"copy(null) failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-array.js":29,"./is-equal.js":31,"./is-undefined.js":35,"./normal.js":45}],17:[function(require,module,exports){
let assert=require("../misc/assert.js"),isArray=require("./is-array.js"),isNumber=require("./is-number.js"),isUndefined=require("./is-undefined.js"),covariance=require("./covariance.js"),std=require("./std.js");function correl(e,r){return assert(!isUndefined(e)&&!isUndefined(r),"You must pass two equally-sized one-dimensional arrays into the `correl` function!"),assert(isArray(e)&&isArray(r),"The `correl` function works on exactly two one-dimensional arrays!"),assert(e.length===r.length,"The two one-dimensional arrays passed into the `correl` function must have the same length!"),e.concat(r).forEach(function(e){assert(isNumber(e),"The two one-dimensional arrays passed into the `correl` function must contain only numbers!")}),covariance(e,r)/(std(e)*std(r))}if(module.exports=correl,!module.parent&&"undefined"==typeof window){let e,r=require("./normal.js"),s=require("./abs.js"),a=require("./add.js"),o=require("./scale.js"),t=r([1e4]),l=r([1e4]),c=correl(t,l);assert(s(c)<.05,`correl(normal([10000]), normal([10000])) should be approximately 0, but instead was ${c}!`),c=correl(t,l=a(t,o(.01,r([1e4])))),assert(c>.95,`correl(x, x + 0.01 * normal([10000])) should be approximately 1, but instead was ${c}!`),c=correl(t,l=a(o(-1,t),o(.01,r([1e4])))),assert(c<-.95,`correl(x, -x + 0.01 * normal([10000])) should be approximately -1, but instead was ${c}!`);try{e=!1,correl(1,2)}catch(r){e=!0}assert(e,"correl(1, 2) should have failed!");try{e=!1,correl(!0,!1)}catch(r){e=!0}assert(e,"correl(true, false) should have failed!");try{e=!1,correl([],{})}catch(r){e=!0}assert(e,"correl([], {}) should have failed!");try{e=!1,correl("foo","bar")}catch(r){e=!0}assert(e,'correl("foo", "bar") should have failed!');try{e=!1,correl([2,3,4],["a","b","c"])}catch(r){e=!0}assert(e,'correl([2, 3, 4], ["a", "b", "c"]) should have failed!');try{e=!1,correl([[2,3,4],[5,6,7]],[[8,9,10],[11,12,13]])}catch(r){e=!0}assert(e,"correl([[2, 3, 4], [5, 6, 7]], [[8, 9, 10], [11, 12, 13]]) should have failed!");let i=()=>{};try{e=!1,correl(i,i)}catch(r){e=!0}assert(e,"correl(fn, fn) should have failed!");try{let r;e=!1,correl(r,r)}catch(r){e=!0}assert(e,"correl(foo, foo) should have failed!"),assert(isNaN(correl([2,3,4],[1,1,1])),"correl([2, 3, 4], [1, 1, 1]) should be NaN!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./abs.js":6,"./add.js":7,"./covariance.js":20,"./is-array.js":29,"./is-number.js":33,"./is-undefined.js":35,"./normal.js":45,"./scale.js":52,"./std.js":62}],18:[function(require,module,exports){
let assert=require("../misc/assert.js"),isNumber=require("./is-number.js"),isUndefined=require("./is-undefined.js"),vectorize=require("./vectorize.js"),cos=vectorize(function(s){return assert(!isUndefined(s),"You must pass a single number or single array of numbers into the `cos` function!"),assert(isNumber(s),"The `cos` function only works on numbers!"),Math.cos(s)});if(module.exports=cos,!module.parent&&"undefined"==typeof window){let s,e=require("./min.js"),o=require("./max.js"),t=require("./normal.js"),r=require("./chop.js"),a=t([1e4]).map(s=>100*s),c=cos(a);assert(e(c)>=-1,"Values produced by the `cos` function should never be below -1!"),assert(o(c)<=1,"Values produced by the `cos` function should never be above 1!"),c=cos(a=0),assert(1===c,`cos(0) should be 1, but instead is ${c}!`),c=cos(a=Math.PI/2),assert(0===r(c),`cos(Math.PI / 2) should be 0, but instead is ${c}!`),c=cos(a=Math.PI),assert(-1===c,`cos(Math.PI) should be -1, but instead is ${c}!`),c=cos(a=3*Math.PI/2),assert(0===r(c),`cos(3 * Math.PI / 2) should be 0, but instead is ${c}!`);try{s=!1,cos("foo")}catch(e){s=!0}assert(s,'cos("foo") should have failed!');try{s=!1,cos(!0)}catch(e){s=!0}assert(s,"cos(true) should have failed!");try{s=!1,cos({})}catch(e){s=!0}assert(s,"cos({}) should have failed!");try{s=!1,cos([1,2,"three"])}catch(e){s=!0}assert(s,'cos([1, 2, "three"]) should have failed!');try{s=!1,cos(()=>{})}catch(e){s=!0}assert(s,"cos(() => {}) should have failed!");try{let e;s=!1,cos(e)}catch(e){s=!0}assert(s,"cos(foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./chop.js":13,"./is-number.js":33,"./is-undefined.js":35,"./max.js":39,"./min.js":42,"./normal.js":45,"./vectorize.js":67}],19:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js"),flatten=require("./flatten.js");function count(t,e){assert(!isUndefined(t),"You must an array and an item to count to the `count` function!"),assert(isArray(t),"You must an array and an item to count to the `count` function!");let a=flatten(t);return isArray(e)?flatten(e).map(function(t){return a.filter(e=>e===t).length}):a.filter(t=>t===e).length}if(module.exports=count,!module.parent&&"undefined"==typeof window){let t=require("./random.js"),e=require("./round.js"),a=require("./abs.js"),o=[2,2,2,3,4,2,2],r=5,s=count(o,2);assert(r===s),r=[2,3,5],s=count(o=[!0,!0,!1,!1,!1,"a","a","a","a","a"],[!0,!1,"a"]);for(let t=0;t<r.length;t++)assert(r[t]===s[t],'count([true, true, false, false, false, "a", "a", "a", "a", "a"], [true, false, "a"]) should be [2, 3, 5]!');let n,u=count(o=e(t([1e4])),0),c=count(o,1);assert(a(u-5e3)<250,"count(round(random([10000])), 0) should be approximately 5000!"),assert(a(c-5e3)<250,"count(round(random([10000])), 1) should be approximately 5000!"),assert(0===count([2,3,4]),"count([2, 3, 4]) should be 0!");try{n=!1,count()}catch(t){n=!0}assert(n,"count() should have failed!");try{n=!1,count(234)}catch(t){n=!0}assert(n,"count(234) should have failed!");try{n=!1,count(!0)}catch(t){n=!0}assert(n,"count(true) should have failed!");try{n=!1,count("foo")}catch(t){n=!0}assert(n,'count("foo") should have failed!');try{n=!1,count({})}catch(t){n=!0}assert(n,"count({}) should have failed!");try{n=!1,count(()=>{})}catch(t){n=!0}assert(n,"count(() => {}) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./abs.js":6,"./flatten.js":25,"./is-array.js":29,"./is-undefined.js":35,"./random.js":48,"./round.js":51}],20:[function(require,module,exports){
let assert=require("../misc/assert.js"),isArray=require("./is-array.js"),isUndefined=require("./is-undefined.js"),isNumber=require("./is-number.js"),mean=require("./mean.js");function covariance(e,a){assert(!isUndefined(e)&&!isUndefined(a),"You must pass two equally-sized one-dimensional arrays into the `covariance` function!"),assert(isArray(e)&&isArray(a),"The `covariance` function only works on two equally-sized one-dimensional arrays of numbers!"),e.concat(a).forEach(function(e){assert(isNumber(e),"The `covariance` function only works on two equally-sized one-dimensional arrays of numbers!")}),assert(e.length===a.length,"The two one-dimensional arrays passed into the `covariance` function must be of equal length!");let r=mean(e),s=mean(a),n=0;for(let o=0;o<e.length;o++)n+=(e[o]-r)*(a[o]-s);return n/e.length}if(module.exports=covariance,!module.parent&&"undefined"==typeof window){let e,a=require("./normal.js"),r=require("./abs.js"),s=(require("./chop.js"),[2,3,4]),n=[1,1,1],o=covariance(s,n);assert(0===o,`covariance([2, 3, 4], [1, 1, 1]) should be 0, but instead was ${o}!`),o=covariance(s=a([1e4]),n=a([1e4])),assert(r(o)<.05,`covariance(normal([10000]), normal(10000)) should be approximately 0, but instead is ${o}!`),n=covariance(s,s),assert(n>.95,`covariance(x, x) should be approximately 1, but instead is ${n}!`),assert(isNaN(covariance([],[])),"covariance([], []) should be NaN!");try{e=!1,covariance([1,2,3],[1,2,3,4])}catch(a){e=!0}assert(e,"covariance([1, 2, 3], [1, 2, 3, 4]) should have failed!");try{e=!1,covariance(["foo","bar","baz"],["a","b","c"])}catch(a){e=!0}assert(e,'covariance(["foo", "bar", "baz"], ["a", "b", "c"]) should have failed!');try{let a;e=!1,covariance([a],[a])}catch(a){e=!0}assert(e,"covariance([foo], [foo]) should have failed!");try{let a=()=>{};e=!1,covariance([a],[a])}catch(a){e=!0}assert(e,"covariance([fn], [fn]) should have failed!");try{e=!1,covariance({},{})}catch(a){e=!0}assert(e,"covariance({}, {}) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./abs.js":6,"./chop.js":13,"./is-array.js":29,"./is-number.js":33,"./is-undefined.js":35,"./mean.js":40,"./normal.js":45}],21:[function(require,module,exports){
let assert=require("../misc/assert.js"),isArray=require("./is-array.js"),isUndefined=require("./is-undefined.js"),shape=require("./shape.js"),transpose=require("./transpose.js"),range=require("./range.js"),isNumber=require("./is-number.js"),isString=require("./is-string.js"),apply=require("../misc/apply.js"),isFunction=require("./is-function.js"),ndarray=require("./ndarray.js"),copy=require("./copy.js");function isInteger(e){return isNumber(e)&&parseInt(e)===e}function isWholeNumber(e){return isInteger(e)&&e>=0}function isObject(e){return e instanceof Object&&!isArray(e)}function isDataFrame(e){return e instanceof DataFrame}class DataFrame{constructor(e){let s=this;if(Object.defineProperty(s,"_values",{value:[],configurable:!0,enumerable:!1,writable:!0}),Object.defineProperty(s,"values",{configurable:!0,enumerable:!0,get:()=>s._values,set(e){let a=shape(e);assert(2===a.length,"The new array of values must be 2-dimensional!"),a[0]<s.index.length?s.index=s.index.slice(0,a[0]):a[0]>s.index.length&&(s.index=s.index.concat(range(s.index.length,a[0]).map(e=>"row"+e))),a[1]<s.columns.length?s.columns=s.columns.slice(0,a[1]):a[1]>s.columns.length&&(s.columns=s.columns.concat(range(s.columns.length,a[1]).map(e=>"col"+e))),s._values=e}}),s.columns=[],s.index=[],assert(isUndefined(e)||e instanceof Object,"The `data` passed into the constructor of a DataFrame must be either (1) an object where the key-value pairs are (respectively) column names and 1-dimensional arrays of values, or (2) a 2-dimensional array of values."),e)if(isArray(e)){let a=shape(e);assert(2===a.length,"The `data` array passed into the constructor of a DataFrame must be 2-dimensional!"),s.values=e}else{s.columns=Object.keys(e);let a=[];s.columns.forEach(s=>{let t=e[s];a.push(t)}),s.values=transpose(a);let t=shape(s.values);s.index=range(0,t[0]).map(e=>"row"+e)}}get shape(){return shape(this.values)}isEmpty(){return this.shape.length<2}clear(){let e=this.copy();return e.values=ndarray(e.shape),e.index=this.index,e.columns=this.columns,e}getSubsetByNames(e,s){let a=this;isUndefined(e)&&(e=a.index),isUndefined(s)&&(s=a.columns),assert(isArray(e)&&isArray(s),"The `rows` and `cols` parameters must be 1-dimensional arrays of strings."),assert(1===shape(e).length&&1===shape(s).length,"The `rows` and `cols` parameters must be 1-dimensional arrays of strings."),assert(e.length>0,"The `rows` array must contain at least one row name."),assert(s.length>0,"The `cols` array must contain at least one column name."),e.forEach(e=>{assert(isString(e),"The `rows` and `cols` parameters must be 1-dimensional arrays of strings."),assert(a.index.indexOf(e)>-1,`The row name "${e}" does not exist in the list of rows.`)}),s.forEach(e=>{assert(isString(e),"The `rows` and `cols` parameters must be 1-dimensional arrays of strings."),assert(a.columns.indexOf(e)>-1,`The column name "${e}" does not exist in the list of columns.`)});let t=e.map(e=>s.map(s=>a.values[a.index.indexOf(e)][a.columns.indexOf(s)])),r=new DataFrame(t);return r.columns=s,r.index=e,r}getSubsetByIndices(e,s){let a=this,t=a.shape;isUndefined(e)&&(e=range(0,t[0])),isUndefined(s)&&(s=range(0,t[1])),assert(isArray(e)&&isArray(s),"The `rowIndices` and `colIndices` parameters must be 1-dimensional arrays of whole numbers."),assert(1===shape(e).length&&1===shape(s).length,"The `rowIndices` and `colIndices` parameters must be 1-dimensional arrays of whole numbers."),assert(e.length>0,"The `rowIndices` array must contain at least one index."),assert(s.length>0,"The `colIndices` array must contain at least one index."),e.forEach(e=>{assert(isWholeNumber(e),"The `rowIndices` and `colIndices` parameters must be 1-dimensional arrays of whole numbers."),assert(e<a.index.length,`The row index ${e} is out of bounds.`)}),s.forEach(e=>{assert(isWholeNumber(e),"The `rowIndices` and `colIndices` parameters must be 1-dimensional arrays of whole numbers."),assert(e<a.columns.length,`The column index ${e} is out of bounds.`)});let r=e.map(e=>a.index[e]),n=s.map(e=>a.columns[e]);return a.getSubsetByNames(r,n)}loc(e,s){return this.getSubsetByNames(e,s)}iloc(e,s){return this.getSubsetByIndices(e,s)}transpose(){let e=new DataFrame(transpose(this.values));return e.columns=this.index,e.index=this.columns,e}get T(){return this.transpose()}resetIndex(){let e=this.copy();return e.index=range(0,this.shape[0]).map(e=>"row"+e),e}copy(){let e=new DataFrame(copy(this.values));return e.columns=this.columns.slice(),e.index=this.index.slice(),e}assign(e){assert(isObject(e),"An object must be passed into the `assign` method.");let s=this.copy(),a=s.shape;return Object.keys(e).forEach(t=>{let r=e[t];assert(r.length===a[0],`Column "${t}" in the new data is not the same length as the other columns in the original DataFrame.`);let n=s.columns.indexOf(t);n<0&&(s.columns.push(t),n=s.columns.indexOf(t)),s.values.forEach((e,s)=>{e[n]=r[s]})}),s}apply(e,s){s=s||0,assert(isFunction(e),"The first parameter to the `apply` method must be a function."),assert(0===s||1===s,"The second parameter to the `apply` method (the `axis`) must be 0 or 1.");let a=this.copy();return 0===s?((a=a.transpose()).values=a.values.map((s,t)=>e(a.index[t],s)),a=a.transpose()):1===s&&(a.values=a.values.map((s,t)=>e(a.index[t],s))),a}dropMissing(e,s,a){function t(e){if(a>0){let s=0;for(let t=0;t<e.length;t++){let r=e[t];if(isUndefined(r)&&s++,s>=a)return[]}}else if("any"===s)for(let s=0;s<e.length;s++){let a=e[s];if(isUndefined(a))return[]}else if("all"===s){for(let s=0;s<e.length;s++){let a=e[s];if(!isUndefined(a))return e}return[]}return e}assert(0===(e=e||0)||1===e,"The first parameter of the `dropMissing` method (the `axis`) must be 0 or 1."),assert(isWholeNumber(a=a||0),"The third parameter of the `dropMissing` method (the `threshold`) should be a whole number (meaning that data should be dropped if it contains more than `threshold` null values)."),assert("any"===(s=a>0?"none":s||"any")||"all"===s||"none"===s,"The second parameter of the `dropMissing` method (the `condition` parameter, which indicates the condition under which data should be dropped) should be 'any' or 'all' (meaning that if 'any' of the data contains null values, then it should be dropped; or that if 'all' of the data contains null values, then it should be dropped).");let r=this.copy();if(0===e){let e=r.values.map(t).filter((e,s)=>0!==e.length||(r.index.splice(s,1),!1));if(shape(e).length<2)return new DataFrame;r.values=e}else if(1===e){let e=(r=r.transpose()).values.map(t).filter((e,s)=>0!==e.length||(r.index.splice(s,1),!1));if(shape(e).length<2)return new DataFrame;r.values=e,r=r.transpose()}return r}}if(module.exports=DataFrame,!module.parent&&"undefined"==typeof window){let e=require("./is-equal.js"),s=require("./normal.js"),a=require("./set.js"),t=require("./flatten.js"),r=require("./distance.js"),n=require("./zeros.js"),i=require("./chop.js"),o=require("./random.js"),l=[17,32],h=s(l),u=new DataFrame(h);assert(isDataFrame(u),"`df` is not a DataFrame!"),assert(e(u.shape,l),"The shape of the DataFrame is not the same as the shape of its data!"),assert(!u.isEmpty(),"`df` should not be empty!"),assert((new DataFrame).isEmpty(),"New DataFrames should be empty!");let d=a(u.clear().values);assert(1===d.length&&isUndefined(d[0]),"Cleared DataFrames should only have `undefined` values.");let c=s(100),m=s(100),p=s(100),f=(u=new DataFrame({a:c,b:m,c:p})).shape;assert(e(c,t(u.loc(null,["a"]).values)),"The values in column 'a' are not the same as the values used to create it!"),assert(e(m,t(u.loc(null,["b"]).values)),"The values in column 'b' are not the same as the values used to create it!"),assert(e(p,t(u.loc(null,["c"]).values)),"The values in column 'c' are not the same as the values used to create it!"),assert(e(u.values,u.transpose().transpose().values),"A doubly-transposed DataFrame should have the same values as the original!"),assert(0===i(r(u.values,n(u.shape))-r(u.transpose().values,n(u.transpose().shape))),"A transposed DataFrame's values should have the same 2-norm as the original!");let g=!1;try{u.loc(u.index,u.columns),g=!1}catch(e){g=!0}assert(!g,"`df.loc(df.index, df.columns)` should not have failed!");try{u.loc([],u.columns),g=!1}catch(e){g=!0}assert(g,"`df.loc([], df.columns)` should have failed!");try{u.loc(u.index,[]),g=!1}catch(e){g=!0}assert(g,"`df.loc(df.index, [])` should have failed!");try{u.loc(["this doesn't exist"],["this doesn't exist"]),g=!1}catch(e){g=!0}assert(g,'`df.loc(["this doesn\'t exist"], ["this doesn\'t exist"])` should have failed!');try{u.iloc(range(0,f[0]),range(0,f[1])),g=!1}catch(e){g=!0}assert(!g,"`df.iloc(range(0, dfShape[0]), range(0, dfShape[1]))` should not have failed!");try{u.iloc(),g=!1}catch(e){g=!0}assert(!g,"`df.iloc()` should not have failed!");try{u.iloc([-5],[-7]),g=!1}catch(e){g=!0}assert(g,"`df.iloc([-5], [-7])` should have failed!");try{u.iloc([500],[700]),g=!1}catch(e){g=!0}assert(g,"`df.iloc([500], [700])` should have failed!");let v=u.copy();assert(e(u,v),"A DataFrame and its copy should evaluate as equal!"),assert(!(u===v),"A DataFrame and its copy should not be the same object!"),u.index=range(0,f[0]).map(e=>Math.random().toString()),assert(!e(u.index,v.index),"`df` should now have random row names!"),u=u.resetIndex(),assert(e(u.index,v.index),"`df` should now have its original row names!");let y=s(100);u=u.assign({d:y}),assert(e(y,t(u.loc(null,["d"]).values)),"The values in column 'd' are not the same as the values used to create it!"),c=o(100),u=u.assign({a:c}),assert(e(c,t(u.loc(null,["a"]).values)),"The values in column 'a' are not the same as the values that were assigned to it!"),u=(u=new DataFrame(n([3,3]))).apply((e,s)=>s.map((s,a)=>e+"/"+a));let b=[["col0/0","col1/0","col2/0"],["col0/1","col1/1","col2/1"],["col0/2","col1/2","col2/2"]];assert(e(b,u.values),"The DataFrame's new values should be as I've described!"),u=(u=new DataFrame(n([3,3]))).apply((e,s)=>s.map((s,a)=>e+"/"+a),1),assert(e(b=[["row0/0","row0/1","row0/2"],["row1/0","row1/1","row1/2"],["row2/0","row2/1","row2/2"]],u.values),"The DataFrame's new values should be as I've described!"),u=new DataFrame([[0,null],[1,"foo"],[2,"bar"],[3,null],[4,null],[null,"uh-oh"]]),assert(e(u.dropMissing().shape,[2,2]),"The DataFrame should have a shape of [2, 2] after dropping missing values!"),assert(e(u.dropMissing().index,["row1","row2"]),"The DataFrame's new index should be as I've described!"),assert(u.dropMissing(1).isEmpty(),"The DataFrame should be empty after dropping missing values!"),assert(e(u.dropMissing(1,"all").shape,u.shape),"The DataFrame should have its original shape after trying to drop missing values!"),assert(e(u.dropMissing(1,null,4).shape,u.shape),"The DataFrame should have its original shape after trying to drop missing values!"),assert(e(u.dropMissing(1,null,3).shape,[6,1]),"The DataFrame should have a shape of [6, 1] after dropping missing values!"),assert(u.dropMissing(1,null,1).isEmpty(),"The DataFrame should be empty after dropping missing values!"),console.log("All tests passed!")}

},{"../misc/apply.js":70,"../misc/assert.js":72,"./chop.js":13,"./copy.js":16,"./distance.js":22,"./flatten.js":25,"./is-array.js":29,"./is-equal.js":31,"./is-function.js":32,"./is-number.js":33,"./is-string.js":34,"./is-undefined.js":35,"./ndarray.js":44,"./normal.js":45,"./random.js":48,"./range.js":49,"./set.js":54,"./shape.js":55,"./transpose.js":65,"./zeros.js":68}],22:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isNumber=require("./is-number.js"),shape=require("./shape.js"),flatten=require("./flatten.js"),pow=require("./pow.js"),sum=require("./sum.js"),add=require("./add.js"),scale=require("./scale.js");function distance(e,s){assert(!isUndefined(e)&&!isUndefined(s),"You must pass two congruently-shaped arrays of numbers into the `distance` function!");let a=shape(e),t=shape(s);return assert(a.length===t.length,"You must pass two congruently-shaped arrays of numbers into the `distance` function!"),assert(0===sum(add(a,scale(t,-1))),"You must pass two congruently-shaped arrays of numbers into the `distance` function!"),flatten(e).concat(flatten(s)).forEach(function(e){assert(isNumber(e),"The `distance` function only works on numbers!")}),pow(sum(pow(add(e,scale(s,-1)),2)),.5)}if(module.exports=distance,!module.parent&&"undefined"==typeof window){let e,s=require("./normal.js"),a=[4,6],t=[1,2];assert(5===distance(a,t),"distance([4, 6], [1, 2]) should be 5!"),assert(distance(a=[-2,-2],t=[-1,-1])===pow(2,.5),"distance([-2, -2], [-1, -1]) should be sqrt(2)!"),a=s([5,5,5,5]),assert(0===distance(a,a),"distance(x, x) should be 0!");try{e=!1,distance()}catch(s){e=!0}assert(e,"distance() should have failed!");try{e=!1,distance(s(5),s(6))}catch(s){e=!0}assert(e,"distance(normal(5), normal(6)) should have failed!");try{e=!1,distance(!0,!1)}catch(s){e=!0}assert(e,"distance(true, false) should have failed!");try{e=!1,distance("foo","bar")}catch(s){e=!0}assert(e,'distance("foo", "bar") should have failed!');try{e=!1,distance({},{})}catch(s){e=!0}assert(e,"distance({}, {}) should have failed!");try{let s=()=>{};e=!1,distance(s,s)}catch(s){e=!0}assert(e,"distance(fn, fn) should have failed!");try{let s;e=!1,distance(s,s)}catch(s){e=!0}assert(e,"distance(foo, foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./add.js":7,"./flatten.js":25,"./is-number.js":33,"./is-undefined.js":35,"./normal.js":45,"./pow.js":47,"./scale.js":52,"./shape.js":55,"./sum.js":63}],23:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js"),isNumber=require("./is-number.js"),flatten=require("./flatten.js"),min=require("./min.js"),max=require("./max.js"),apply=require("../misc/apply.js");function distrib(s,i){assert(!isUndefined(s),"You must pass an array of numbers (and optionally an integer number of bins) into the `distrib` function!"),assert(isArray(s),"You must pass an array of numbers (and optionally an integer number of bins) into the `distrib` function!");let t=flatten(s);t.forEach(s=>assert(isNumber(s)),"You must pass an array of numbers (and optionally an integer number of bins) into the `distrib` function!"),isUndefined(i)?i=parseInt(t.length/10):(assert(isNumber(i),"You must pass an array of numbers (and optionally an integer number of bins) into the `distrib` function!"),assert(i===parseInt(i),"You must pass an array of numbers (and optionally an integer number of bins) into the `distrib` function!"));let e=[],r=min(t),a=max(t),n=(a-r)/i;for(let s=r;s<a;s+=n){let i=t.filter(i=>i>=s&&i<s+n||s+n>=a&&i>=a),r=i.length;i.forEach(s=>t.splice(t.indexOf(s),1)),e.push(r)}return e}if(module.exports=distrib,!module.parent&&"undefined"==typeof window){let s,i=require("./is-equal.js"),t=(require("./normal.js"),[1,1,1,1,1,2,2,2,2,3,3,3,4,4,5]),e=5,r=[5,4,3,2,1],a=distrib(t,e);assert(i(r,a),`distrib([1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5], 5) should be [5, 4, 3, 2, 1], but instead was [${a.join(", ")}]!`),r=[1,1,1,1,1,1,1,1],a=distrib(t=[3,4,5,6,7,8,9,10],e=8),assert(i(r,a),`distrib([3, 4, 5, 6, 7, 8, 9, 10], 8) should be [1, 1, 1, 1, 1, 1, 1, 1], but instead was [${a.join(", ")}]!`),r=[6,4,7],a=distrib(t=[-2.5,-2.5,-1.5,-1.5,-1.5,-1.5,-.5,.5,.5,.5,1.5,1.5,1.5,1.5,1.5,2.5,2.5],e=3),assert(i(r,a),`distrib([-2.5, -2.5, -1.5, -1.5, -1.5, -1.5, -0.5, 0.5, 0.5, 0.5, 1.5, 1.5, 1.5, 1.5, 1.5, 2.5, 2.5], 3) should be [6, 4, 7], but instead was [${a.join(", ")}]!`);try{s=!1,distrib()}catch(i){s=!0}assert(s,"distrib() should have failed!");try{s=!1,distrib(!0)}catch(i){s=!0}assert(s,"distrib(true) should have failed!");try{s=!1,distrib("foo")}catch(i){s=!0}assert(s,'distrib("foo") should have failed!');try{s=!1,distrib(234)}catch(i){s=!0}assert(s,"distrib(234) should have failed!");try{let i;s=!1,distrib(i)}catch(i){s=!0}assert(s,"distrib(foo) should have failed!");try{s=!1,distrib(()=>{})}catch(i){s=!0}assert(s,"distrib(() => {}) should have failed!");try{s=!1,distrib({})}catch(i){s=!0}assert(s,"distrib({}) should have failed!");try{s=!1,distrib([],"foo")}catch(i){s=!0}assert(s,'distrib([], "foo") should have failed!');try{s=!1,distrib([],!0)}catch(i){s=!0}assert(s,"distrib(true) should have failed!");try{s=!1,distrib([],[])}catch(i){s=!0}assert(s,"distrib([]) should have failed!");try{s=!1,distrib([],{})}catch(i){s=!0}assert(s,"distrib([], {}) should have failed!");try{s=!1,distrib([],()=>{})}catch(i){s=!0}assert(s,"distrib([], () => {}) should have failed!"),console.log("All tests passed!")}

},{"../misc/apply.js":70,"../misc/assert.js":72,"./flatten.js":25,"./is-array.js":29,"./is-equal.js":31,"./is-number.js":33,"./is-undefined.js":35,"./max.js":39,"./min.js":42,"./normal.js":45}],24:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js"),isNumber=require("./is-number.js"),isEqual=require("./is-equal.js"),flatten=require("./flatten.js"),shape=require("./shape.js"),sum=require("./sum.js"),scale=require("./scale.js"),transpose=require("./transpose.js");function dot(e,t){assert(!isUndefined(e)&&!isUndefined(t),"You must pass two arrays of numbers into the `dot` function!"),assert(isArray(e)&&isArray(t),"You must pass two arrays of numbers into the `dot` function!"),flatten(e).concat(flatten(t)).forEach(function(e){assert(isNumber(e),"The `dot` function only works on numbers!")});let s=shape(e),o=shape(t);if(assert(s.length<=2&&o.length<=2,"I'm not smart enough to know how to get the dot-product of arrays that have more than 2 dimensions. Sorry for the inconvenience! Please only pass 1- or 2-dimensional arrays into the `dot` function!"),assert(s[s.length-1]===o[0],`There's a dimension misalignment in the two arrays you passed into the \`dot\` function. (${s[s.length-1]} !== ${o[0]})`),1===s.length&&1===o.length)return sum(scale(e,t));if(1===s.length&&2===o.length)return transpose(t).map(t=>dot(e,t));if(2===s.length&&1===o.length)return e.map(e=>dot(e,t));if(2===s.length&&2===o.length){let s=transpose(t),o=[];for(let t=0;t<e.length;t++){let a=[];for(let o=0;o<s.length;o++)a.push(dot(e[t],s[o]));o.push(a)}return o}}if(module.exports=dot,!module.parent&&"undefined"==typeof window){let e,t=require("./normal.js"),s=[2,3,4],o=[5,6,7],a=56,r=dot(s,o);assert(isEqual(a,r),"dot([2, 3, 4], [5, 6, 7]) should be 56!"),a=[[49,54,59],[87,96,105],[125,138,151]],r=dot(s=[[2,3],[4,5],[6,7]],o=[[8,9,10],[11,12,13]]),assert(isEqual(a,r),"dot([[2, 3], [4, 5], [6, 7]], [[8, 9, 10], [11, 12, 13]]) should be [[49, 54, 59], [87, 96, 105], [125, 138, 151]]!"),a=[100,90],r=dot(s=[4,3,2,1],o=[[12,11],[10,9],[8,7],[6,5]]),assert(isEqual(a,r),"dot([4, 3, 2, 1], [[12, 11], [10, 9], [8, 7], [6, 5]]) should be [100, 90]!"),a=[205,530],r=dot(s=[[1,2,3,4,5],[6,7,8,9,10]],o=[11,12,13,14,15]),assert(isEqual(a,r),"dot([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], [11, 12, 13, 14, 15]) should be [100, 90]!");try{e=!1,dot()}catch(t){e=!0}assert(e,"dot() should have failed!");try{e=!1,dot(2,3)}catch(t){e=!0}assert(e,"dot(2, 3) should have failed!");try{e=!1,dot(!0,!1)}catch(t){e=!0}assert(e,"dot(true, false) should have failed!");try{e=!1,dot("foo","bar")}catch(t){e=!0}assert(e,'dot("foo", "bar") should have failed!');try{e=!1,dot(t([2,3]),t([2,3]))}catch(t){e=!0}assert(e,"dot(normal([2, 3]), normal([2, 3])) should have failed!");try{e=!1,dot(t([2,3,4]))}catch(t){e=!0}assert(e,"dot([2, 3, 4]) should have failed!");try{let t=()=>{};e=!1,dot(t,t)}catch(t){e=!0}assert(e,"dot(fn, fn) should have failed!");try{let t;e=!1,dot(t,t)}catch(t){e=!0}assert(e,"dot(foo, foo) should have failed!");try{e=!1,dot({},{})}catch(t){e=!0}assert(e,"dot({}, {}) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./flatten.js":25,"./is-array.js":29,"./is-equal.js":31,"./is-number.js":33,"./is-undefined.js":35,"./normal.js":45,"./scale.js":52,"./shape.js":55,"./sum.js":63,"./transpose.js":65}],25:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js");function flatten(t){assert(!isUndefined(t),"You must pass one array into the `flatten` function!"),assert(isArray(t),"The `flatten` function only works on arrays!");let e=[];return t.forEach(function(t){isArray(t)?e=e.concat(flatten(t)):e.push(t)}),e}if(module.exports=flatten,!module.parent&&"undefined"==typeof window){let t,e=require("./normal.js"),a=[2,3,4],s=[2,3,4],l=flatten(a);for(let t=0;t<s.length;t++)assert(s[t]===l[t],"flatten([2, 3, 4]) should be [2, 3, 4]!");s=[2,3,4,5,6,7],l=flatten(a=[[2,3,4],[5,6,7]]);for(let t=0;t<s.length;t++)assert(s[t]===l[t],"flatten([[2, 3, 4], [5, 6, 7]]) should be [2, 3, 4, 5, 6, 7]!");l=flatten(a=e([2,3,4,5])),assert(120===l.length,"flatten(normal([2, 3, 4, 5])) should have 120 values!");try{t=!1,flatten()}catch(e){t=!0}assert(t,"flatten() should have failed!");try{t=!1,flatten({})}catch(e){t=!0}assert(t,"flatten({}) should have failed!");try{t=!1,flatten(!0)}catch(e){t=!0}assert(t,"flatten(true) should have failed!");try{t=!1,flatten("foo")}catch(e){t=!0}assert(t,'flatten("foo") should have failed!');try{t=!1,flatten(()=>{})}catch(e){t=!0}assert(t,"flatten(() => {}) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-array.js":29,"./is-undefined.js":35,"./normal.js":45}],26:[function(require,module,exports){
let assert=require("../misc/assert.js"),isNumber=require("./is-number.js"),isUndefined=require("./is-undefined.js"),vectorize=require("./vectorize.js"),floor=vectorize(function(e){return assert(!isUndefined(e),"You must pass a single number or a single array of numbers into the `floor` function!"),assert(isNumber(e),"The `floor` function only works on numbers!"),Math.floor(e)});if(module.exports=floor,!module.parent&&"undefined"==typeof window){let e,o=require("./random.js"),r=require("./zeros.js"),s=5.95,t=5,l=floor(s);assert(t===l,`floor(${s}) should be ${t}, but instead was ${l}!`),t=-4,l=floor(s=-3.25),assert(t===l,`floor(${s}) should be ${t}, but instead was ${l}!`),t=[1,2,3],l=floor(s=[1.25,2.5,3.75]);for(let e=0;e<t.length;e++)assert(t[e]===l[e],`floor(${s[e]}) should be ${t[e]}, but instead was ${l[e]}!`);s=o([500]),t=r([500]),l=floor(s);for(let e=0;e<t.length;e++)assert(t[e]===l[e],`floor(${s[e]}) should be ${t[e]}, but instead was ${l[e]}!`);try{e=!1,floor("foo")}catch(o){e=!0}assert(e,'floor("foo") should have failed!');try{e=!1,floor({})}catch(o){e=!0}assert(e,"floor({}) should have failed!");try{e=!1,floor([1,2,"three"])}catch(o){e=!0}assert(e,'floor([1, 2, "three"]) should have failed!');try{let o;e=!1,floor(o)}catch(o){e=!0}assert(e,"floor(foo) should have failed!");try{e=!1,floor(()=>{})}catch(o){e=!0}assert(e,"floor(() => {}) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-number.js":33,"./is-undefined.js":35,"./random.js":48,"./vectorize.js":67,"./zeros.js":68}],27:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isNumber=require("./is-number.js"),zeros=require("./zeros.js");function identity(t){assert(!isUndefined(t),"You must pass an integer greater than 0 (representing the size) into the `identity` function!"),assert(isNumber(t),"You must pass an integer greater than 0 (representing the size) into the `identity` function!"),assert(parseInt(t)===t,"You must pass an integer greater than 0 (representing the size) into the `identity` function!"),assert(t>0,"You must pass an integer greater than 0 (representing the size) into the `identity` function!");let e=zeros([t,t]);for(let i=0;i<t;i++)e[i][i]=1;return e}if(module.exports=identity,!module.parent&&"undefined"==typeof window){function isIdentity(t){for(let e=0;e<t.length;e++){let i=t[e];for(let n=0;n<i.length;n++)if(e===n){if(1!==t[e][n])return!1}else if(0!==t[e][n])return!1}return!0}let t,e=identity(100);assert(isIdentity(e),"identity(100) is not an identity matrix!");try{t=!1,identity()}catch(e){t=!0}assert(t,"identity() should have failed!");try{t=!1,identity("foo")}catch(e){t=!0}assert(t,'identity("foo") should have failed!');try{t=!1,identity(23.4)}catch(e){t=!0}assert(t,"identity(23.4) should have failed!");try{t=!1,identity(-10)}catch(e){t=!0}assert(t,"identity(-10) should have failed!");try{t=!1,identity(!0)}catch(e){t=!0}assert(t,"identity(true) should have failed!");try{t=!1,identity({})}catch(e){t=!0}assert(t,"identity({}) should have failed!");try{t=!1,identity(()=>{})}catch(e){t=!0}assert(t,"identity(() => {}) should have failed!");try{let e;t=!1,identity(e)}catch(e){t=!0}assert(t,"identity(foo) should have failed!");try{t=!1,identity([])}catch(e){t=!0}assert(t,"identity([]) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-number.js":33,"./is-undefined.js":35,"./zeros.js":68}],28:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js"),isNumber=require("./is-number.js"),flatten=require("./flatten.js"),shape=require("./shape.js"),slice=require("./slice.js"),dot=require("./dot.js"),add=require("./add.js"),scale=require("./scale.js"),append=require("./append.js"),range=require("./range.js");function inverse(e){assert(!isUndefined(e),"You must pass a square 2D array into the `inverse` function!"),assert(isArray(e),"You must pass a square 2D array into the `inverse` function!"),flatten(e).forEach(e=>assert(isNumber(e),"The array passed into the `inverse` function must contain only numbers!"));let s=shape(e);if(assert(2===s.length,"The array passed into the `inverse` function must be exactly two-dimensional and square!"),assert(s[0]===s[1],"The array passed into the `inverse` function must be exactly two-dimensional and square!"),assert(s[0]>=0,"The array passed into the `inverse` function must be exactly two-dimensional and square!"),0===s[0])return e;if(1===s[0])return assert(0!==e[0][0],"This matrix cannot be inverted!"),1/e[0][0];if(2===s[0]){let s=e[0][0],r=e[0][1],a=e[1][0],i=e[1][1],t=s*i-r*a;return assert(0!==t,"This matrix cannot be inverted!"),scale([[i,-r],[-a,s]],1/t)}if(s[0]>1){let r=(e,s)=>isNumber(e)||isNumber(s)?scale(e,s):dot(e,s);for(let a=1;a<s[0]-1;a++)try{let i=slice(e,[range(0,a),range(0,a)]),t=slice(e,[range(0,a),range(a,s[0])]),n=slice(e,[range(a,s[0]),range(0,a)]),d=slice(e,[range(a,s[0]),range(a,s[0])]),u=inverse(i),o=inverse(add(d,r(-1,r(r(n,u),t)))),l=add(u,r(r(r(r(u,t),o),n),u)),c=r(-1,r(r(u,t),o)),h=r(-1,r(r(o,n),u)),v=o;return append(append(l,c,1),append(h,v,1),0)}catch(e){}assert(!1,"This matrix cannot be inverted!")}}if(module.exports=inverse,!module.parent&&"undefined"==typeof window){let e,s=require("./identity.js"),r=(require("./is-equal.js"),require("./normal.js")),a=require("./random.js"),i=require("./distance.js"),t=require("./round.js"),n=require("./zeros.js"),d=r([10,10]),u=inverse(d);assert(i(s(10),dot(d,u))<1e-5,"FAIL!"),u=inverse(d=a([20,20])),assert(i(s(20),dot(d,u))<1e-5,"FAIL!"),u=inverse(d=t(add(scale(r([10,10]),10),20))),assert(i(s(10),dot(d,u))<1e-5,"FAIL!"),u=inverse(d=s(10)),assert(i(s(10),dot(d,u))<1e-5,"FAIL!");try{e=!1,inverse()}catch(s){e=!0}assert(e,"inverse() should have failed!");try{e=!1,inverse(234)}catch(s){e=!0}assert(e,"inverse(234) should have failed!");try{e=!1,inverse("foo")}catch(s){e=!0}assert(e,'inverse("foo") should have failed!');try{e=!1,inverse(!0)}catch(s){e=!0}assert(e,"inverse(true) should have failed!");try{e=!1,inverse({})}catch(s){e=!0}assert(e,"inverse({}) should have failed!");try{e=!1,inverse(()=>{})}catch(s){e=!0}assert(e,"inverse(() => {}) should have failed!");try{let s;e=!1,inverse(s)}catch(s){e=!0}assert(e,"inverse(foo) should have failed!");try{e=!1,inverse(d=[[1,2,3],[4,5,6],[7,8,9]])}catch(s){e=!0}assert(e,"inverse([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) should have failed!");try{e=!1,inverse(n([10,10]))}catch(s){e=!0}assert(e,"inverse(zeros([10, 10])) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./add.js":7,"./append.js":8,"./distance.js":22,"./dot.js":24,"./flatten.js":25,"./identity.js":27,"./is-array.js":29,"./is-equal.js":31,"./is-number.js":33,"./is-undefined.js":35,"./normal.js":45,"./random.js":48,"./range.js":49,"./round.js":51,"./scale.js":52,"./shape.js":55,"./slice.js":59,"./zeros.js":68}],29:[function(require,module,exports){
function isArray(r){return r instanceof Array}if(module.exports=isArray,!module.parent&&"undefined"==typeof window){let r=require("../misc/assert.js");r(isArray([]),"isArray([]) should return true!"),r(isArray([2,3,4]),"isArray([2, 3, 4]) should return true!"),r(isArray(new Array),"isArray(new Array()) should return true!"),r(!isArray({}),"isArray({}) should return false!"),r(!isArray({push:()=>{}}),"isArray({push: () => {}}) should return false!"),r(!isArray("foo"),'isArray("foo") should return false!'),r(!isArray(!0),"isArray(true) should return false!"),r(!isArray(!1),"isArray(false) should return false!"),r(!isArray(()=>{}),"isArray(() => {}) should return false!"),r(!isArray(3),"isArray(3) should return false!"),console.log("All tests passed!")}

},{"../misc/assert.js":72}],30:[function(require,module,exports){
function isBoolean(o){return"boolean"==typeof o}module.exports=isBoolean;

},{}],31:[function(require,module,exports){
let isArray=require("./is-array.js");function isEqual(l,e){let u=typeof l;if(u!==typeof e)return!1;if("undefined"===u)return!0;if("boolean"===u)return l===e;if("number"===u)return l===e;if("string"===u)return l===e;if("function"===u)return l===e;if("object"===u){if(null===l||null===e)return null===l&&null===e;{let u=Object.keys(l),s=Object.keys(e);if(u.length!==s.length)return!1;for(let s=0;s<u.length;s++){let i=u[s];if(!e.hasOwnProperty(i))return!1;if(!isEqual(l[i],e[i]))return!1}return!0}}}if(module.exports=isEqual,!module.parent&&"undefined"==typeof window){let l=require("../misc/assert.js");l(isEqual(2,2),"isEqual(2, 2) should be true!"),l(isEqual(-3.5,-3.5),"isEqual(-3.5, -3.5) should be true!"),l(isEqual("foo","foo"),'isEqual("foo", "foo") should be true!'),l(isEqual(!0,!0),"isEqual(true, true) should be true!"),l(isEqual(!1,!1),"isEqual(false, false) should be true!"),l(isEqual({},{}),"isEqual({}, {}) should be true!"),l(isEqual(void 0,void 0),"isEqual(undefined, undefined) should be true!"),l(isEqual(null,null),"isEqual(null, null) should be true!"),l(isEqual({x:5},{x:5}),"isEqual({x: 5}, {x: 5}) should be true!"),l(isEqual([2,3,4],[2,3,4]),"isEqual([2, 3, 4], [2, 3, 4]) should be true!");let e=()=>{};l(isEqual(e,e),"isEqual(fn, fn) should be true!");let u={name:"James",friends:["Bill","Sally"]},s={name:"James",friends:["Bill","Sally"]};l(isEqual(u,s),"isEqual(a, b) should be true!");let i=[2,-3.5,"foo",!0,!1,{},void 0,null,{x:5},[2,3,4],{name:"James",friends:["Bill","Sally"]}];for(let e=0;e<i.length-1;e++)for(let r=e;r<i.length;r++)e!==r&&l(!isEqual(u=i[e],s=i[r]),`isEqual(a, b) should be false! (a: ${JSON.stringify(u)}, b: ${JSON.stringify(s)})`);console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-array.js":29}],32:[function(require,module,exports){
function isFunction(n){return"function"==typeof n}module.exports=isFunction;

},{}],33:[function(require,module,exports){
function isNumber(e){return"number"==typeof e}if(module.exports=isNumber,!module.parent&&"undefined"==typeof window){let e=require("../misc/assert.js");e(isNumber(3),"3 is a number!"),e(isNumber(-3.5),"-3.5 is a number!"),e(isNumber(2573.2903482093484,"2573.2903482093482035023948 is a number!")),e(!isNumber("35"),'"35" is not a number!'),e(!isNumber("foo"),'"foo" is not a number!'),e(!isNumber([2,3,4]),"[2, 3, 4] is not a number!"),e(!isNumber({x:5}),"{x: 5} is not a number!"),e(!isNumber(!0),"true is not a number!"),e(!isNumber(!1),"false is not a number!"),console.log("All tests passed!")}

},{"../misc/assert.js":72}],34:[function(require,module,exports){
function isString(i){return"string"==typeof i}if(module.exports=isString,!module.parent&&"undefined"==typeof window){let i=require("../misc/assert.js");i(isString("hi"),'"hi" is a string!'),i(isString(""),'"" is a string!'),i(isString(""),"`` is a string!"),i(isString("foo","'foo' is a string!")),i(!isString(3),"3 is not a string!"),i(!isString(!0),"true is not a string!"),i(!isString(!1),"false is not a string!"),i(!isString({x:5}),"{x: 5} is not a string!"),i(!isString(["a","b","c"]),'["a", "b", "c"] is not a string!'),console.log("All tests passed!")}

},{"../misc/assert.js":72}],35:[function(require,module,exports){
function isUndefined(e){return null==e}if(module.exports=isUndefined,!module.parent&&"undefined"==typeof window){let e,d,s=require("../misc/assert.js");s(!isUndefined("foo"),'isUndefined("foo") should be false, but instead was true!'),s(!isUndefined({}),"isUndefined({}) should be false, but instead was true!"),s(!isUndefined(3),"isUndefined(3) should be false, but instead was true!"),s(!isUndefined([]),"isUndefined([]) should be false, but instead was true!"),s(!isUndefined(!0),"isUndefined(true) should be false, but instead was true!"),s(!isUndefined(!1),"isUndefined(false) should be false, but instead was true!"),s(!isUndefined(()=>{}),"isUndefined(() => {}) should be false, but instead was true!"),s(isUndefined(e),"isUndefined(x) should be true, but instead was false!");try{d=!1,isUndefined(foo)}catch(e){d=!0}s(d,"isUndefined(foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72}],36:[function(require,module,exports){
let assert=require("../misc/assert.js"),isNumber=require("./is-number.js"),isUndefined=require("./is-undefined.js"),vectorize=require("./vectorize.js"),lerp=vectorize(function(e,s,r){return assert(!isUndefined(e)&&!isUndefined(s)&&!isUndefined(r),"You must pass exactly three numbers (or three equally-sized arrays of numbers) into the `lerp` function!"),assert(isNumber(e)&&isNumber(s)&&isNumber(r),"The `lerp` function only works on numbers!"),r*(s-e)+e});if(module.exports=lerp,!module.parent&&"undefined"==typeof window){let e=0,s=1,r=1,t=lerp(e,s,r);assert(1===t,`lerp(0, 1, 1) should be 1, but instead was ${t}!`),t=lerp(e=-1,s=1,r=.5),assert(0===t,`lerp(-1, 1, 0.5) should be 0, but instead was ${t}!`),t=lerp(e=-100,s=100,r=.75),assert(50===t,`lerp(-100, 100, 0.75) should be 50, but instead was ${t}!`);let l,a=[1.5,2.75,3.9],o=lerp(e=[1,2,3],s=[2,3,4],r=[.5,.75,.9]);for(let t=0;t<a.length;t++)assert(a[t]===o[t],`lerp(${e[t]}, ${s[t]}, ${r[t]}) should be ${a[t]}, but instead was ${o[t]}!`);try{l=!1,lerp(3,4,"foo")}catch(e){l=!0}assert(l,'lerp(3, 4, "foo") should have failed!');try{l=!1,lerp([1],[2,3],.75)}catch(e){l=!0}assert(l,"lerp([1], [2, 3], 0.75) should have failed!");try{l=!1,lerp({},{},{})}catch(e){l=!0}assert(l,"lerp({}, {}, {}) should have failed!");try{let e;l=!1,lerp(e,e,e)}catch(e){l=!0}assert(l,"lerp(foo, foo, foo) should have failed!");try{let e=()=>{};l=!1,lerp(e,e,e)}catch(e){l=!0}assert(l,"lerp(fn, fn, fn) should have failed!");try{l=!1,lerp(1,2)}catch(e){l=!0}assert(l,"lerp(1, 2) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-number.js":33,"./is-undefined.js":35,"./vectorize.js":67}],37:[function(require,module,exports){
let assert=require("../misc/assert.js"),isNumber=require("./is-number.js"),isUndefined=require("./is-undefined.js"),vectorize=require("./vectorize.js"),log=vectorize(function(e,s){return assert(!isUndefined(e),"You must pass a single number or a single array of numbers into the `log` function!"),assert(isNumber(e),"You must pass a single number or a single array of numbers into the `log` function!"),s=isUndefined(s)?Math.E:s,assert(isNumber(s),"The base parameter of the `log` function must be a number or an array of numbers!"),Math.log(e)/Math.log(s)});if(module.exports=log,!module.parent&&"undefined"==typeof window){let e,s=require("./abs.js"),o=require("./chop.js"),t=Math.E,a=Math.E,r=1,l=log(t,a);assert(r===l,`log(${t}) should be ${r}, but instead was ${l}!`),r=1,l=log(t=10,a=10),assert(r===l,`log(${t}) should be ${r}, but instead was ${l}!`),r=2,l=log(t=100,a=10),assert(r===l,`log(${t}) should be ${r}, but instead was ${l}!`),r=[2,3,4],l=log(t=[100,1e3,1e4],a=10);for(let e=0;e<r.length;e++)assert(0===o(s(r[e]-l[e])),`log(${t[e]}, ${a}) should be ${r[e]}, but instead was ${l[e]}!`);r=[6,3,2],l=log(t=64,a=[2,4,8]);for(let e=0;e<r.length;e++)assert(0===o(s(r[e]-l[e])),`log(${t[e]}, ${a}) should be ${r[e]}, but instead was ${l[e]}!`);assert(0===log([]).length,"log([]) should have produced an empty array!");try{e=!1,log()}catch(s){e=!0}assert(e,"log() should have failed!");try{e=!1,log("foo")}catch(s){e=!0}assert(e,'log("foo") should have failed!');try{e=!1,log({})}catch(s){e=!0}assert(e,"log({}) should have failed!");try{e=!1,log(!0)}catch(s){e=!0}assert(e,"log(true) should have failed!");try{e=!1,log(()=>{})}catch(s){e=!0}assert(e,"log(() => {}) should have failed!");try{let s;e=!1,log(s)}catch(s){e=!0}assert(e,"log(foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./abs.js":6,"./chop.js":13,"./is-number.js":33,"./is-undefined.js":35,"./vectorize.js":67}],38:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isNumber=require("./is-number.js"),vectorize=require("./vectorize.js"),map=vectorize(function(e,s,a,i,t){return assert(!(isUndefined(e)||isUndefined(s)||isUndefined(a)||isUndefined(i)||isUndefined(t)),"You should pass five numbers (or five equally-sized arrays of numbers) into the `map` function!"),assert(isNumber(e)&&isNumber(s)&&isNumber(a)&&isNumber(i)&&isNumber(t),"The `map` function only works on numbers!"),(t-i)*(e-s)/(a-s)+i});if(module.exports=map,!module.parent&&"undefined"==typeof window){let e,s=1,a=0,i=2,t=0,r=10,d=5,u=map(s,a,i,t,r);assert(d===u,`map(${s}, ${a}, ${i}, ${t}, ${t}) should be ${d}, but instead is ${u}!`),d=300,u=map(s=2,a=1,i=3,t=100,r=500),assert(d===u,`map(${s}, ${a}, ${i}, ${t}, ${t}) should be ${d}, but instead is ${u}!`),d=[200,300,400],u=map(s=[1,2,3],a=0,i=4,t=100,r=500);for(let e=0;e<d.length;e++)assert(d[e]===u[e],`map(${s[e]}, ${a}, ${i}, ${t}, ${r}) should be ${d[e]}, but instead was ${u[e]}!`);try{e=!1,map(1,2,3,4,"five")}catch(s){e=!0}assert(e,'map(1, 2, 3, 4, "five") should have failed!');try{e=!1,map()}catch(s){e=!0}assert(e,"map() should have failed!");try{e=!1,map(1,2,3,4,{})}catch(s){e=!0}assert(e,"map(1, 2, 3, 4, {}) should have failed!");try{let s;e=!1,map(1,2,3,4,s)}catch(s){e=!0}assert(e,"map(1, 2, 3, 4, foo) should have failed!");try{e=!1,map(1,2,3,4,()=>{})}catch(s){e=!0}assert(e,"map(1, 2, 3, 4, () => {}) should have failed!");try{e=!1,map(1,2,3,4,!0)}catch(s){e=!0}assert(e,"map(1, 2, 3, 4, true) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-number.js":33,"./is-undefined.js":35,"./vectorize.js":67}],39:[function(require,module,exports){
let assert=require("../misc/assert.js"),isArray=require("./is-array.js"),isNumber=require("./is-number.js"),isUndefined=require("./is-undefined.js"),flatten=require("./flatten.js");function max(a){assert(!isUndefined(a),"You must pass one array of numbers into the `max` function!"),assert(isArray(a),"You must pass one array of numbers into the `max` function!");let e=flatten(a);e.forEach(function(a){assert(isNumber(a),"The `max` function only works on numbers or arrays of numbers!")});let s=-1/0;return e.forEach(function(a){a>s&&(s=a)}),s===-1/0?void 0:s}if(module.exports=max,!module.parent&&"undefined"==typeof window){let a,e=require("./normal.js"),s=require("./random.js"),r=require("./min.js"),t=[2,3,4],o=max(t);assert(4===o,`max([2, 3, 4]) should be 4, but instead was ${o}!`),o=max(t=[-10,-5,-20]),assert(-5===o,`max([-10, -5, -20]) should be -5, but instead was ${o}!`),o=max(t=s([1e4])),assert(o<=1&&o>=0,"max(random([10000])) should be >= 0 and <= 1!"),t=e([1e4]),xMin=r(t),xMax=max(t),xRange=xMax-xMin,t=t.map(a=>(a-xMin)/xRange),assert(1===max(t),"max(normalizedData) should be 1!");try{a=!1,max()}catch(e){a=!0}assert(a,"max() should have failed!");try{a=!1,max(2)}catch(e){a=!0}assert(a,"max(2) should have failed!");try{a=!1,max(!0)}catch(e){a=!0}assert(a,"max(true) should have failed!");try{a=!1,max({})}catch(e){a=!0}assert(a,"max({}) should have failed!");try{a=!1,max(()=>{})}catch(e){a=!0}assert(a,"max(() => {}) should have failed!");try{a=!1,max([1,2,"three"])}catch(e){a=!0}assert(a,'max([1, 2, "three"]) should have failed!');try{a=!1,max("foo")}catch(e){a=!0}assert(a,'max("foo") should have failed!');try{let e;a=!1,max(e)}catch(e){a=!0}assert(a,"max(foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./flatten.js":25,"./is-array.js":29,"./is-number.js":33,"./is-undefined.js":35,"./min.js":42,"./normal.js":45,"./random.js":48}],40:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js"),isNumber=require("./is-number.js"),flatten=require("./flatten.js"),sum=require("./sum.js");function mean(e){assert(!isUndefined(e),"You must pass one array of numbers into the `mean` function!"),assert(isArray(e),"You must pass one array of numbers into the `mean` function!");let a=flatten(e);return a.forEach(function(e){assert(isNumber(e),"The `mean` function only works on arrays of numbers!")}),sum(a)/a.length}if(module.exports=mean,!module.parent&&"undefined"==typeof window){let e,a=require("./normal.js"),s=require("./random.js"),r=require("./abs.js"),n=[2,3,4],t=3,o=mean(n);assert(t===o,`mean(2, 3, 4) should be 3, but instead is ${o}!`),o=mean(n=a([1e4])),assert(r(o)<.05,`mean(normal([10000])) should be approximately 0, but instead was ${o}!`),o=mean(n=s([1e4])),assert(o-.5<.05,`mean(random([10000])) should be approximately 0.5, but instead was ${o}!`),o=mean(n=a([10,10,10,10])),assert(r(o)<.05,`mean(normal([10, 10, 10, 10])) should be approximately 0, but instead was ${o}!`);try{e=!1,mean()}catch(a){e=!0}assert(e,"mean() should have failed!");try{e=!1,mean("foo")}catch(a){e=!0}assert(e,'mean("foo") should have failed!');try{e=!1,mean({})}catch(a){e=!0}assert(e,"mean({}) should have failed!");try{e=!1,mean(!0)}catch(a){e=!0}assert(e,"mean(true) should have failed!");try{let a;e=!1,mean(a)}catch(a){e=!0}assert(e,"mean(foo) should have failed!");try{e=!1,mean(()=>{})}catch(a){e=!0}assert(e,"mean(() => {}) should have failed!");try{e=!1,mean([1,2,"three"])}catch(a){e=!0}assert(e,'mean([1, 2, "three"]) should have failed!'),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./abs.js":6,"./flatten.js":25,"./is-array.js":29,"./is-number.js":33,"./is-undefined.js":35,"./normal.js":45,"./random.js":48,"./sum.js":63}],41:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js"),isNumber=require("./is-number.js"),flatten=require("./flatten.js"),sort=require("./sort.js");function median(e){assert(!isUndefined(e),"You must pass one array of numbers into the `median` function!"),assert(isArray(e),"You must pass one array of numbers into the `median` function!");let a,s=flatten(e);return s.forEach(function(e){assert(isNumber(e),"The `median` function only works on numbers!")}),a=(s=sort(s,function(e,a){return e<a?-1:e>a?1:0})).length%2==0?(s[s.length/2-1]+s[s.length/2])/2:s[Math.floor(s.length/2)]}if(module.exports=median,!module.parent&&"undefined"==typeof window){let e=require("./shuffle.js"),a=(require("./normal.js"),require("./random.js")),s=require("./round.js"),r=require("./scale.js"),n=3,t=median([2,4,3]);assert(n===t,`median([2, 4, 3]) should be 3, but instead was ${t}!`);let i,d=s(r(a([5,5,5,5]),100)),o=e(d),u=e(d),m=e(d),l=median(d),f=median(o),h=median(u),c=median(m);assert(l===f&&f===h&&h===c,"The `median` function should return the same median for shuffled versions of the same array!"),assert(isNaN(median([])),"median([]) should be NaN!");try{i=!1,median()}catch(e){i=!0}assert(i,"median() should have failed!");try{i=!1,median("foo")}catch(e){i=!0}assert(i,'median("foo") should have failed!');try{i=!1,median([1,2,"three"])}catch(e){i=!0}assert(i,'median([1, 2, "three"]) should have failed!');try{i=!1,median([!0])}catch(e){i=!0}assert(i,"median([true]) should have failed!");try{i=!1,median([{}])}catch(e){i=!0}assert(i,"median([{}]) should have failed!");try{let e;i=!1,median([e,e,e])}catch(e){i=!0}assert(i,"median([foo, foo, foo]) should have failed!");try{let e=()=>{};i=!1,median([e,e,e])}catch(e){i=!0}assert(i,"median([fn, fn, fn]) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./flatten.js":25,"./is-array.js":29,"./is-number.js":33,"./is-undefined.js":35,"./normal.js":45,"./random.js":48,"./round.js":51,"./scale.js":52,"./shuffle.js":56,"./sort.js":60}],42:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js"),isNumber=require("./is-number.js"),flatten=require("./flatten.js");function min(e){assert(!isUndefined(e),"You must pass one array of numbers into the `min` function!"),assert(isArray(e),"You must pass one array of numbers into the `min` function!");let s=flatten(e);s.forEach(function(e){assert(isNumber(e),"The `min` function only works on arrays of numbers!")});let n=1/0;return s.forEach(function(e){e<n&&(n=e)}),n===1/0?void 0:n}if(module.exports=min,!module.parent&&"undefined"==typeof window){let e,s=require("./random.js"),n=[4,2,3],i=2,t=min(n);assert(i===t,`min([4, 2, 3]) should be 2, but instead was ${t}!`),i=-100,t=min(n=[[-50,50,234],[100,-100,0]]),assert(i===t,`min([[-50, 50, 234], [100, -100, 0]]) should be -100, but instead was ${t}!`),t=min(n=s([2,3,4,5])),assert(t<=1&&t>=0,"min(random([2, 3, 4, 5])) should be >= 0 and <= 1!");try{e=!1,min()}catch(s){e=!0}assert(e,"min() should have failed!");try{e=!1,min(234)}catch(s){e=!0}assert(e,"min(234) should have failed!");try{e=!1,min({})}catch(s){e=!0}assert(e,"min({}) should have failed!");try{e=!1,min("foo")}catch(s){e=!0}assert(e,'min("foo") should have failed!');try{e=!1,min(!0)}catch(s){e=!0}assert(e,"min(true) should have failed!");try{e=!1,min([1,2,"three"])}catch(s){e=!0}assert(e,'min([1, 2, "three"]) should have failed!');try{e=!1,min([()=>{}])}catch(s){e=!0}assert(e,"min([() => {}]) should have failed!");try{let s;e=!1,min([s,s,s])}catch(s){e=!0}assert(e,"min([foo, foo, foo]) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./flatten.js":25,"./is-array.js":29,"./is-number.js":33,"./is-undefined.js":35,"./random.js":48}],43:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js"),flatten=require("./flatten.js"),count=require("./count.js"),set=require("./set.js"),sort=require("./sort.js");function mode(e){assert(!isUndefined(e),"You must pass one array into the `mode` function!"),assert(isArray(e),"You  must pass one array into the `mode` function!");let s=flatten(e),t={},r={},o=set(s);o.forEach(function(e){t[e]=count(s,e),r[e]=e});let a=sort(o,function(e,s){let r=t[e],o=t[s];return r>o?-1:r<o?1:0}),d=a[0];return a.filter(e=>t[e]===t[d])}if(module.exports=mode,!module.parent&&"undefined"==typeof window){let e=require("./random.js"),s=require("./round.js"),t=require("./shuffle.js"),r=require("./scale.js"),o=[3],a=mode([2,3,3,3,2,4]);for(let e=0;e<o.length;e++)assert(o[e]===a[e],`mode([2, 3, 3, 3, 2, 4]) should be 3, but instead was ${a}!`);let d,n=s(r(e([5,5,5,5]),100)),u=t(n),f=t(n),i=t(n),l=mode(n),h=mode(u),m=mode(f),c=mode(i);for(let e=0;e<l.length;e++)assert(l[e]===h[e],"The `mode` function should return the same mode for shuffled versions of the same array!");for(let e=0;e<l.length;e++)assert(h[e]===m[e],"The `mode` function should return the same mode for shuffled versions of the same array!");for(let e=0;e<l.length;e++)assert(m[e]===c[e],"The `mode` function should return the same mode for shuffled versions of the same array!");try{d=!1,mode()}catch(e){d=!0}assert(d,"mode() should have failed!");try{d=!1,mode("foo")}catch(e){d=!0}assert(d,'mode("foo") should have failed!');try{d=!1,mode({})}catch(e){d=!0}assert(d,"mode({}) should have failed!");try{d=!1,mode(()=>{})}catch(e){d=!0}assert(d,"mode(() => {}) should have failed!");try{d=!1,mode(!0)}catch(e){d=!0}assert(d,"mode(true) should have failed!");try{d=!1,mode()}catch(e){d=!0}assert(d,"mode() should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./count.js":19,"./flatten.js":25,"./is-array.js":29,"./is-undefined.js":35,"./random.js":48,"./round.js":51,"./scale.js":52,"./set.js":54,"./shuffle.js":56,"./sort.js":60}],44:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js"),isNumber=require("./is-number.js"),floor=require("./floor.js"),range=require("./range.js"),error="You must pass an integer or a one-dimensional array of integers into the `ndarray` function!";function ndarray(r){if(assert(!isUndefined(r),error),isArray(r)||(r=[r]),assert(r.length>0,error),r.forEach(function(r){assert(isNumber(r),error),assert(floor(r)===r,error),assert(r>=0,error)}),1===r.length)return range(0,r[0]).map(r=>void 0);{let a=[];for(let e=0;e<r[0];e++)a.push(ndarray(r.slice(1,r.length)));return a}}if(module.exports=ndarray,!module.parent&&"undefined"==typeof window){let r,a=require("./flatten.js");assert(3===ndarray(3).length,"ndarray(3) should have a length of 3!"),assert(3===ndarray([3]).length,"ndarray([3]) should have a length of 3!"),assert(3===ndarray([3,2]).length,"ndarray([3, 2]) should have a length of 3!"),assert(24===a(ndarray([2,3,4])).length,"flatten(ndarray([2, 3, 4])) should have a length of 24!");try{r=!1,ndarray()}catch(a){r=!0}assert(r,"ndarray() should have failed!");try{r=!1,ndarray("foo")}catch(a){r=!0}assert(r,'ndarray("foo") should have failed!');try{r=!1,ndarray(3.5)}catch(a){r=!0}assert(r,"ndarray(3.5) should have failed!");try{r=!1,ndarray(-10)}catch(a){r=!0}assert(r,"ndarray(-10) should have failed!");try{r=!1,ndarray({})}catch(a){r=!0}assert(r,"ndarray({}) should have failed!");try{r=!1,ndarray(!0)}catch(a){r=!0}assert(r,"ndarray(true) should have failed!");try{r=!1,ndarray([])}catch(a){r=!0}assert(r,"ndarray([]) should have failed!");try{r=!1,ndarray(()=>{})}catch(a){r=!0}assert(r,"ndarray(() => {}) should have failed!");try{let a;r=!1,ndarray(a)}catch(a){r=!0}assert(r,"ndarray(foo) should have failed!");try{r=!1,ndarray([1,2,"three"])}catch(a){r=!0}assert(r,'ndarray([1, 2, "three"]) should have failed!'),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./flatten.js":25,"./floor.js":26,"./is-array.js":29,"./is-number.js":33,"./is-undefined.js":35,"./range.js":49}],45:[function(require,module,exports){
let isUndefined=require("./is-undefined.js"),ndarray=require("./ndarray.js"),apply=require("../misc/apply.js"),random=require("./random.js");function normal(e){function a(){let e=random(),a=random();return Math.sqrt(-2*Math.log(e))*Math.cos(2*Math.PI*a)}return isUndefined(e)?a():apply(ndarray(e),a)}if(module.exports=normal,!module.parent&&"undefined"==typeof window){let e=require("../misc/assert.js"),a=require("./std.js"),r=require("./mean.js"),o=require("./abs.js"),n=require("./seed.js"),l=require("./distance.js"),s=normal([1e4]),d=r(s),i=a(s);e(o(d)<.05,"normal([10000]) should have a mean of approximately 0!"),e(o(i-1)<.05,"normal([10000]) should have a standard deviation of approximately 1!"),d=r(s=normal([10,10,10,10])),i=a(s),e(o(d)<.05,"normal([10, 10, 10, 10]) should have a mean of approximately 0!"),e(o(i-1)<.05,"normal([10, 10, 10, 10]) should have a standard deviation of approximately 1!"),n(230498230498);let t,m=normal(1e4);n(230498230498),e(0===l(m,normal(1e4)),"Two normally-distributed arrays seeded with the same value should be identical!");try{t=!1,normal("foo")}catch(e){t=!0}e(t,'normal("foo") should have failed!'),console.log("All tests passed!")}

},{"../misc/apply.js":70,"../misc/assert.js":72,"./abs.js":6,"./distance.js":22,"./is-undefined.js":35,"./mean.js":40,"./ndarray.js":44,"./random.js":48,"./seed.js":53,"./std.js":62}],46:[function(require,module,exports){
let ndarray=require("./ndarray.js"),apply=require("../misc/apply.js");function ones(e){return apply(ndarray(e),e=>1)}if(module.exports=ones,!module.parent&&"undefined"==typeof window){let e,s=require("../misc/assert.js"),o=require("./sum.js"),a=require("./mean.js"),n=require("./std.js"),t=require("./flatten.js"),r=ones([2,3,4,5]);s(120===o(r),"sum(ones([2, 3, 4, 5])) should be 2 * 3 * 4 * 5!"),s(1===a(r),"mean(ones([2, 3, 4, 5])) should be 1!"),s(0===n(r),"std(ones([2, 3, 4, 5])) should be 0!"),s(o(r)===t(r).length,"sum(ones([2, 3, 4, 5])) should be the same as flatten(ones([2, 3, 4, 5])).length!");try{e=!1,ones()}catch(s){e=!0}s(e,"ones() should have failed!");try{e=!1,ones("foo")}catch(s){e=!0}s(e,'ones("foo") should have failed!');try{e=!1,ones(!0)}catch(s){e=!0}s(e,"ones(true) should have failed!");try{e=!1,ones({})}catch(s){e=!0}s(e,"ones({}) should have failed!");try{let s;e=!1,ones(s)}catch(s){e=!0}s(e,"ones(foo) should have failed!");try{e=!1,ones([1,2,"three"])}catch(s){e=!0}s(e,'ones([1, 2, "three"]) should have failed!');try{e=!1,ones(()=>{})}catch(s){e=!0}s(e,"ones(() => {}) should have failed!"),console.log("All tests passed!")}

},{"../misc/apply.js":70,"../misc/assert.js":72,"./flatten.js":25,"./mean.js":40,"./ndarray.js":44,"./std.js":62,"./sum.js":63}],47:[function(require,module,exports){
let vectorize=require("./vectorize.js"),assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isNumber=require("./is-number.js"),pow=vectorize(function(e,s){return assert(!isUndefined(e)&&!isUndefined(s),"You must pass two numbers (or two equally-sized arrays of numbers) into the `pow` function!"),assert(isNumber(e)&&isNumber(s),"You must pass two numbers (or two equally-sized arrays of numbers) into the `pow` function!"),Math.pow(e,s)});if(module.exports=pow,!module.parent&&"undefined"==typeof window){let e,s=3,t=2,o=9,r=pow(s,t);assert(o===r,`pow(${s}, ${t}) should be ${o}, but instead was ${r}!`),o=[9,16,25],r=pow(s=[3,4,5],t=2);for(let e=0;e<o.length;e++)assert(o[e]===r[e],`pow(${s[e]}, ${t}) should be ${o[e]}, but instead was ${r[e]}!`);o=[9,27,81],r=pow(s=3,t=[2,3,4]);for(let e=0;e<o.length;e++)assert(o[e]===r[e],`pow(${s}, ${t[e]}) should be ${o[e]}, but instead was ${r[e]}!`);o=[4,27,256],r=pow(s=[2,3,4],t=[2,3,4]);for(let e=0;e<o.length;e++)assert(o[e]===r[e],`pow(${s[e]}, ${t[e]}) should be ${o[e]}, but instead was ${r[e]}!`);try{e=!1,pow()}catch(s){e=!0}assert(e,"pow() should have failed!");try{e=!1,pow(2)}catch(s){e=!0}assert(e,"pow(2) should have failed!");try{e=!1,pow(2,"three")}catch(s){e=!0}assert(e,'pow(2, "three") should have failed!');try{e=!1,pow("two",3)}catch(s){e=!0}assert(e,'pow("two", 3) should have failed!');try{e=!1,pow(!0,!0)}catch(s){e=!0}assert(e,"pow(true, true) should have failed!");try{e=!1,pow({},{})}catch(s){e=!0}assert(e,"pow({}, {}) should have failed!");try{let s;e=!1,pow(s,s)}catch(s){e=!0}assert(e,"pow(foo, foo) should have failed!");try{let s=()=>{};e=!1,pow(s,s)}catch(s){e=!0}assert(e,"pow(fn, fn) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-number.js":33,"./is-undefined.js":35,"./vectorize.js":67}],48:[function(require,module,exports){
let ndarray=require("./ndarray.js"),apply=require("../misc/apply.js"),isUndefined=require("./is-undefined.js"),seed=require("./seed.js"),pow=require("./pow.js"),a=1103515245,c=12345,m=pow(2,31);function lcg(){let e=seed(),r=(a*e+c)%m;return seed(r),r/m}function random(e){return isUndefined(e)?lcg():apply(ndarray(e),lcg)}if(module.exports=random,!module.parent&&"undefined"==typeof window){let e=require("../misc/assert.js"),r=require("./distance.js"),a=require("./min.js"),d=require("./max.js"),n=require("./abs.js"),o=require("./mean.js"),s=random([10,10,10,10]);e(a(s)>=0&&d(s)<=1,"random([10, 10, 10, 10]) should be in the range [0, 1]!"),e(n(o(s))-.5<.05,"random([10, 10, 10, 10]) should have a mean of approximately 0.5!"),e((s=random())>=0&&s<=1,"random() should be in the range [0, 1]!"),seed(203948203948);let i,t=random([10,10,10,10]);seed(203948203948),e(0===r(t,random([10,10,10,10])),"Two random arrays seeded with the same value should be identical!");try{i=!1,random("foo")}catch(e){i=!0}e(i,'random("foo") should have failed!');try{i=!1,random(!0)}catch(e){i=!0}e(i,"random(true) should have failed!");try{i=!1,random({})}catch(e){i=!0}e(i,"random({}) should have failed!");try{i=!1,random(()=>{})}catch(e){i=!0}e(i,"random(() => {}) should have failed!");try{i=!1,random([1,2,"three"])}catch(e){i=!0}e(i,'random([1, 2, "three"]) should have failed!'),console.log("All tests passed!")}

},{"../misc/apply.js":70,"../misc/assert.js":72,"./abs.js":6,"./distance.js":22,"./is-undefined.js":35,"./max.js":39,"./mean.js":40,"./min.js":42,"./ndarray.js":44,"./pow.js":47,"./seed.js":53}],49:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isNumber=require("./is-number.js");function range(e,a,r=1){assert(!isUndefined(e)&&!isUndefined(a)&&!isUndefined(r),"You must pass two numbers and optionally a step value to the `range` function!"),assert(isNumber(e)&&isNumber(a)&&isNumber(r),"You must pass two numbers and optionally a step value to the `range` function!"),assert(r>0,"The step value must be greater than 0! (NOTE: The step value is a magnitude; it does not indicate direction.)");let s=!1;if(e>a){s=!0;let t=e;e=a+r,a=t+r}let t=[];for(let s=e;s<a;s+=r)t.push(s);return s&&t.reverse(),t}if(module.exports=range,!module.parent&&"undefined"==typeof window){let e,a=[5,6,7,8,9],r=range(5,10);for(let e=0;e<a;e++)assert(a[e]===r[e],"range(5, 10) should be [5, 6, 7, 8, 9]!");a=[5,5.5,6,6.5,7,7.5,8,8.5,9,9.5],r=range(5,10,.5);for(let e=0;e<a;e++)assert(a[e]===r[e],"range(5, 10, 0.5) should be [5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5]!");a=[3,2,1,0,-1,-2],r=range(3,-3);for(let e=0;e<a;e++)assert(a[e]===r[e],"range(3, -3) should be [3, 2, 1, 0, -1, -2]!");a=[-1,-1.25,-1.5,-1.75],r=range(-1,-2,.25);for(let e=0;e<a;e++)assert(a[e]===r[e],"range(-1, -2, 0.25) should be [-1, -1.25, -1.5, -1.75]!");try{e=!1,range()}catch(a){e=!0}assert(e,"range() should have failed!");try{e=!1,range(1,2,-3)}catch(a){e=!0}assert(e,"range(1, 2, -3) should have failed!");try{e=!1,range("foo","bar","baz")}catch(a){e=!0}assert(e,'range("foo", "bar", "baz") should have failed!');try{e=!1,range([],[],[])}catch(a){e=!0}assert(e,"range([], [], []) should have failed!");try{e=!1,range(!0,!0,!0)}catch(a){e=!0}assert(e,"range(true, true, true) should have failed!");try{e=!1,range({},{},{})}catch(a){e=!0}assert(e,"range({}, {}, {}) should have failed!");try{let a;e=!1,range(a,a,a)}catch(a){e=!0}assert(e,"range(foo, foo, foo) should have failed!");try{let a=()=>{};e=!1,range(a,a,a)}catch(a){e=!0}assert(e,"range(fn, fn, fn) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-number.js":33,"./is-undefined.js":35}],50:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js");function reverse(e){assert(!isUndefined(e),"You must pass an array into the `reverse` function!"),assert(isArray(e),"You must pass an array into the `reverse` function!");let s=[];for(let r=e.length-1;r>=0;r--)s.push(e[r]);return s}module.exports=reverse,module.parent||"undefined"!=typeof window||console.log("All tests passed!");

},{"../misc/assert.js":72,"./is-array.js":29,"./is-undefined.js":35}],51:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isNumber=require("./is-number.js"),vectorize=require("./vectorize.js"),round=vectorize(function(e){return assert(!isUndefined(e),"You must pass a number or an array of numbers into the `round` function!"),assert(isNumber(e),"You must pass a number or an array of numbers into the `round` function!"),Math.round(e)});if(module.exports=round,!module.parent&&"undefined"==typeof window){let e,r=require("./random.js"),s=require("./set.js"),o=require("./sort.js"),u=2,t=round(2.34);assert(u===t,`round(2.34) should be 2, but instead was ${t}!`),u=3,t=round(2.5),assert(u===t,`round(2.5) should be 3, but instead was ${t}!`),u=-4,t=round(-3.75),assert(u===t,`round(-3.75) should be -4, but instead was ${t}!`),t=o(s(round(r([10,10,10,10]))),function(e,r){return e<r?-1:e>r?1:0}),assert(0===t[0]&&1===t[1]&&2===t.length,"sort(set(round(random([10, 10, 10, 10])))) should be [0, 1]!");try{e=!1,round()}catch(r){e=!0}assert(e,"round() should have failed!");try{e=!1,round("foo")}catch(r){e=!0}assert(e,'round("foo") should have failed!');try{e=!1,round(!0)}catch(r){e=!0}assert(e,"round(true) should have failed!");try{e=!1,round({})}catch(r){e=!0}assert(e,"round({}) should have failed!");try{e=!1,round(()=>{})}catch(r){e=!0}assert(e,"round(() => {}) should have failed!");try{let r;e=!1,round(r)}catch(r){e=!0}assert(e,"round(foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-number.js":33,"./is-undefined.js":35,"./random.js":48,"./set.js":54,"./sort.js":60,"./vectorize.js":67}],52:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isNumber=require("./is-number.js"),vectorize=require("./vectorize.js"),scale=vectorize(function(e,s){return assert(!isUndefined(e)&&!isUndefined(s),"You must pass two numbers (or an array of numbers and a number, or a number and an array of numbers, or two arrays of numbers) into the `scale` function!"),assert(isNumber(e)&&isNumber(s),"You must pass two numbers (or an array of numbers and a number, or a number and an array of numbers, or two arrays of numbers) into the `scale` function!"),e*s});if(module.exports=scale,!module.parent&&"undefined"==typeof window){let e,s=3,a=5,r=15,t=scale(s,a);assert(r===t,`scale(${s}, ${a}) should be ${r}, but instead was ${t}!`),r=[15,20,25],t=scale(s=[3,4,5],a=5);for(let e=0;e<r.length;e++)assert(r[e]===t[e],`scale(${s[e]}, ${a}) should be ${r[e]}, but instead was ${t[e]}!`);r=[15,18,21],t=scale(s=3,a=[5,6,7]);for(let e=0;e<r.length;e++)assert(r[e]===t[e],`scale(${s}, ${a[e]}) should be ${r[e]}, but instead was ${t[e]}!`);r=[10,18,28],t=scale(s=[2,3,4],a=[5,6,7]);for(let e=0;e<r.length;e++)assert(r[e]===t[e],`scale(${s[e]}, ${a[e]}) should be ${r[e]}, but instead was ${t[e]}!`);try{e=!1,scale()}catch(s){e=!0}assert(e,"scale() should have failed!");try{e=!1,scale("two","three")}catch(s){e=!0}assert(e,'scale("two", "three") should have failed!');try{e=!1,scale(!0,!1)}catch(s){e=!0}assert(e,"scale(true, false) should have failed!");try{e=!1,scale({},{})}catch(s){e=!0}assert(e,"scale({}, {}) should have failed!");try{let s=()=>{};e=!1,scale(s,s)}catch(s){e=!0}assert(e,"scale(fn, fn) should have failed!");try{let s;e=!1,scale(s,s)}catch(s){e=!0}assert(e,"scale(foo, foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-number.js":33,"./is-undefined.js":35,"./vectorize.js":67}],53:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isNumber=require("./is-number.js"),s=parseInt(999999*Math.random());function seed(e){if(isUndefined(e)||(assert(isNumber(e),"If passing a value into the `seed` function, then that value must be a positive integer!"),assert(parseInt(e)===e,"If passing a value into the `seed` function, then that value must be a positive integer!"),assert(e>=0,"If passing a value into the `seed` function, then that value must be a positive integer!")),isUndefined(e))return s;s=e}module.exports=seed;

},{"../misc/assert.js":72,"./is-number.js":33,"./is-undefined.js":35}],54:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js"),flatten=require("./flatten.js");function set(e){assert(!isUndefined(e),"You must pass an array into the `set` function!"),assert(isArray(e),"You must pass an array into the `set` function!");let s=[];return flatten(e).forEach(function(e){s.indexOf(e)<0&&s.push(e)}),s}if(module.exports=set,!module.parent&&"undefined"==typeof window){let e=require("./sort.js"),s=require("./round.js"),t=require("./random.js"),r=require("./range.js");function alphasort(e,s){return e<s?-1:e>s?1:0}let a,o=[2,2,2,2,3,3,3,3,3,4,3,4,3,2,2,3,3,3,3,4],l=[2,3,4],n=e(set(o),alphasort);for(let e=0;e<l.length;e++)assert(l[e]===n[e],"set([2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 2, 2, 3, 3, 3, 3, 4]) should be [2, 3, 4]!");o=s(t([10,10,10,10])),l=[0,1],n=e(set(o),alphasort);for(let e=0;e<l.length;e++)assert(l[e]===n[e],"set(round(random([10, 10, 10, 10]))) should be [0, 1]!");l=(o=r(10,20,.25)).slice(),n=set(o);for(let e=0;e<l.length;e++)assert(l[e]===n[e],"set(range(10, 20, 0.25)) should be the same as range(10, 20, 0.25)!");l=["foo","bar","baz",!0,!1,234,0],n=set(o=["foo","bar","baz","foo","foo",!0,!0,!1,!0,234,234,0]);for(let e=0;e<l.length;e++)assert(l[e]===n[e],'set(["foo", "bar", "baz", "foo", "foo", true, true, false, true, 234, 234, 0]) should be ["foo", "bar", "baz", true, false, 234, 0]!');try{a=!1,set()}catch(e){a=!0}assert(a,"set() should have failed!");try{a=!1,set("foo")}catch(e){a=!0}assert(a,'set("foo") should have failed!');try{a=!1,set(234)}catch(e){a=!0}assert(a,"set(234) should have failed!");try{a=!1,set(!0)}catch(e){a=!0}assert(a,"set(true) should have failed!");try{a=!1,set({})}catch(e){a=!0}assert(a,"set({}) should have failed!");try{a=!1,set(()=>{})}catch(e){a=!0}assert(a,"set(() => {}) should have failed!");try{let e;a=!1,set(e)}catch(e){a=!0}assert(a,"set(foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./flatten.js":25,"./is-array.js":29,"./is-undefined.js":35,"./random.js":48,"./range.js":49,"./round.js":51,"./sort.js":60}],55:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js"),max=require("./max.js");function shape(e){assert(!isUndefined(e),"You must pass an array into the `shape` function!"),assert(isArray(e),"You must pass an array into the `shape` function!");let s=[e.length],a=e.map(e=>isArray(e));if(a.indexOf(!0)>-1){assert(a.indexOf(!1)<0,"The array passed into the `shape` function has some children that are not themselves arrays!");let t=e.map(e=>e.length),h=max(t);t.forEach(function(e){assert(e===h,"The array passed into the `shape` function has some children of inconsistent length!")}),s=s.concat(shape(e[0]))}return s}if(module.exports=shape,!module.parent&&"undefined"==typeof window){let e,s=require("./normal.js"),a=500,t=shape(s(a))[0];assert(a===t,`shape(normal(500)) should be 500, but instead was ${t}!`),t=shape(s(a=[2,3,4]));for(let e=0;e<a.shape;e++)assert(a[e]===t[e],"shape(normal([2, 3, 4])) should be [2, 3, 4]!");try{e=!1,shape()}catch(s){e=!0}assert(e,"shape() should have failed!");try{e=!1,shape("foo")}catch(s){e=!0}assert(e,'shape("foo") should have failed!');try{e=!1,shape(234)}catch(s){e=!0}assert(e,"shape(234) should have failed!");try{e=!1,shape(!0)}catch(s){e=!0}assert(e,"shape(true) should have failed!");try{e=!1,shape({})}catch(s){e=!0}assert(e,"shape({}) should have failed!");try{e=!1,shape(()=>{})}catch(s){e=!0}assert(e,"shape(() => {}) should have failed!");try{let s;e=!1,shape(s)}catch(s){e=!0}assert(e,"shape(foo) should have failed!");try{e=!1,shape([[2,3,4],[5,6]])}catch(s){e=!0}assert(e,"shape([[2, 3, 4], [5, 6]]) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-array.js":29,"./is-undefined.js":35,"./max.js":39,"./normal.js":45}],56:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js"),floor=require("./floor.js"),random=require("./random.js");function shuffle(e){assert(!isUndefined(e),"You must pass a one-dimensional array into the `shuffle` function!"),assert(isArray(e),"You must pass a one-dimensional array into the `shuffle` function!"),e.forEach(function(e){assert(!isArray(e),"You must pass a one-dimensional array into the `shuffle` function!")});let s=e.slice();for(let a=0;a<e.length;a++){let a=floor(random()*e.length),f=floor(random()*e.length),r=s[a];s[a]=s[f],s[f]=r}return s}if(module.exports=shuffle,!module.parent&&"undefined"==typeof window){let e,s=require("./normal.js"),a=require("./seed.js"),f=require("./distance.js"),r=s(1e4),l=shuffle(r);assert(f(r,l)>0,"shuffle(a) should not be in the same order as a!"),r=s(1e4),a(20394230948),a1=shuffle(r),a(20394230948),a2=shuffle(r),assert(0===f(a1,a2),"Shuffling using the same seed should produce the same results!");try{e=!0,shuffle()}catch(s){e=!0}assert(e,"shuffle() should have failed!");try{e=!0,shuffle("foo")}catch(s){e=!0}assert(e,'shuffle("foo") should have failed!');try{e=!0,shuffle(!0)}catch(s){e=!0}assert(e,"shuffle(true) should have failed!");try{e=!0,shuffle({})}catch(s){e=!0}assert(e,"shuffle({}) should have failed!");try{e=!0,shuffle(234)}catch(s){e=!0}assert(e,"shuffle(234) should have failed!");try{e=!0,shuffle(()=>{})}catch(s){e=!0}assert(e,"shuffle(() => {}) should have failed!");try{e=!0,shuffle(random([2,3,4]))}catch(s){e=!0}assert(e,"shuffle(random([2, 3, 4])) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./distance.js":22,"./floor.js":26,"./is-array.js":29,"./is-undefined.js":35,"./normal.js":45,"./random.js":48,"./seed.js":53}],57:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isNumber=require("./is-number.js"),vectorize=require("./vectorize.js"),sign=vectorize(function(e){return assert(!isUndefined(e),"You must pass a number or an array of numbers into the `sign` function!"),assert(isNumber(e),"You must pass a number or an array of numbers into the `sign` function!"),e<0?-1:e>1?1:0});if(module.exports=sign,!module.parent&&"undefined"==typeof window){let e=require("./random.js"),s=require("./normal.js"),r=(require("./round.js"),require("./set.js")),i=require("./sort.js"),a=require("./chop.js"),t=require("./scale.js"),n=require("./add.js");function alphasort(e,s){return e<s?-1:e>s?1:0}let o,u=i(r(sign(a(s(1e4)))),alphasort);assert(-1===u[0]&&0===u[1]&&1===u[2],"sort(set(sign(chop(normal(10000)))), alphasort) should be [-1, 0, 1]!"),(u=sign(n(e(1e4),100))).forEach(e=>assert(e>=0),"sign(add(random(10000), 100)) should only result in positive values!"),(u=sign(t(e(1e4),-1))).forEach(e=>assert(e<=0),"sign(scale(random(10000), -1)) should only result in negative values!");try{o=!1,sign()}catch(e){o=!0}assert(o,"sign() should have failed!");try{o=!1,sign("foo")}catch(e){o=!0}assert(o,'sign("foo") should have failed!');try{o=!1,sign(!0)}catch(e){o=!0}assert(o,"sign(true) should have failed!");try{o=!1,sign({})}catch(e){o=!0}assert(o,"sign({}) should have failed!");try{o=!1,sign(()=>{})}catch(e){o=!0}assert(o,"sign(() => {}) should have failed!");try{let e;o=!1,sign(e)}catch(e){o=!0}assert(o,"sign(foo) should have failed!");try{o=!1,sign([1,2,"three"])}catch(e){o=!0}assert(o,'sign([1, 2, "three"]) should have failed!'),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./add.js":7,"./chop.js":13,"./is-number.js":33,"./is-undefined.js":35,"./normal.js":45,"./random.js":48,"./round.js":51,"./scale.js":52,"./set.js":54,"./sort.js":60,"./vectorize.js":67}],58:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isNumber=require("./is-number.js"),vectorize=require("./vectorize.js"),sin=vectorize(function(e){return assert(!isUndefined(e),"You must pass a number or an array of numbers into the `sin` function!"),assert(isNumber(e),"You must pass a number or an array of numbers into the `sin` function!"),Math.sin(e)});if(module.exports=sin,!module.parent&&"undefined"==typeof window){let e,s=require("./min.js"),i=require("./max.js"),r=sin(require("./range.js")(0,10*Math.PI,Math.PI/180));assert(-1===s(r)&&1===i(r),"sin(range(0, 10 * Math.PI, Math.PI / 100)) should be in the range [-1, 1]!");try{e=!1,sin()}catch(s){e=!0}assert(e,"sin() should have failed!");try{e=!1,sin("foo")}catch(s){e=!0}assert(e,'sin("foo") should have failed!');try{e=!1,sin(!0)}catch(s){e=!0}assert(e,"sin(true) should have failed!");try{e=!1,sin({})}catch(s){e=!0}assert(e,"sin({}) should have failed!");try{e=!1,sin(()=>{})}catch(s){e=!0}assert(e,"sin(() => {}) should have failed!");try{let s;e=!1,sin(s)}catch(s){e=!0}assert(e,"sin(foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-number.js":33,"./is-undefined.js":35,"./max.js":39,"./min.js":42,"./range.js":49,"./vectorize.js":67}],59:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isNumber=require("./is-number.js"),isArray=require("./is-array.js"),range=require("./range.js"),flatten=require("./flatten.js"),shape=require("./shape.js"),floor=require("./floor.js");function slice(e,s){if(assert(!isUndefined(e),"You must pass an array into the `slice` function!"),assert(isArray(e),"You must pass an array into the `slice` function!"),isUndefined(s))return e.slice();assert(isArray(s),"The indices passed into the `slice` function must be a one-dimensional array of integers or null values."),flatten(s).forEach(function(e){assert(isUndefined(e)||isNumber(e)&&floor(e)===e,"The indices passed into the `slice` function must be a one-dimensional array of integers or null values.")});let i=s[0];isUndefined(i)&&(i=range(0,e.length)),isNumber(i)&&(i=[i]);let l=[];return i.forEach(function(i){assert(i<e.length,"Index out of bounds in the `slice` function!"),i<0&&(i+=e.length);let r=e[i];isArray(r)?l.push(slice(e[i],s.slice(1,s.length))):l.push(e[i])}),l}if(module.exports=slice,!module.parent&&"undefined"==typeof window){let e,s=require("./distance.js"),i=[[2,3,4],[5,6,7],[8,9,10]],l=[[3,6,9]],r=slice(i,[null,1]);l=[[2,3],[8,9]],r=slice(i=[[2,3,4],[5,6,7],[8,9,10]],[[0,2],[0,1]]),assert(0===s(l,r),"slice([[2, 3, 4], [5, 6, 7], [8, 9, 10]], [[0, 2], [0, 1]]) should be [[2, 3], [8, 9]]!"),assert(7===slice(i=[5,6,7],[-1])[0],"slice([5, 6, 7], [-1]) should be [7]!"),l=[[9]],r=slice(i=[[2,3,4],[5,6,7],[8,9,10]],[-1,-2]),assert(0===s(l,r),"slice([[2, 3, 4], [5, 6, 7], [8, 9, 10]], [-1, -2]) should be [9]!");try{e=!1,slice()}catch(s){e=!0}assert(e,"slice() should have failed!");try{e=!1,slice([2,3,4],[1.5,2.5,3.5])}catch(s){e=!0}assert(e,"slice([2, 3, 4], [1.5, 2.5, 3.5]) should have failed!");try{e=!1,slice([2,3,4],0)}catch(s){e=!0}assert(e,"slice([2, 3, 4], 0) should have failed!");try{e=!1,slice("foo")}catch(s){e=!0}assert(e,'slice("foo") should have failed!');try{e=!1,slice(234)}catch(s){e=!0}assert(e,"slice(234) should have failed!");try{e=!1,slice({})}catch(s){e=!0}assert(e,"slice({}) should have failed!");try{e=!1,slice(()=>{})}catch(s){e=!0}assert(e,"slice(() => {}) should have failed!");try{let s;e=!1,slice(s)}catch(s){e=!0}assert(e,"slice(foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./distance.js":22,"./flatten.js":25,"./floor.js":26,"./is-array.js":29,"./is-number.js":33,"./is-undefined.js":35,"./range.js":49,"./shape.js":55}],60:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js");function sort(s,e){assert(!isUndefined(s)&&!isUndefined(e),"You must pass an array and a function into the `sort` function!"),assert(isArray(s),"You must pass an array and a function into the `sort` function!"),assert("function"==typeof e,"You must pass an array and a function into the `sort` function!");let t=s.slice();return t.sort(e),t}if(module.exports=sort,!module.parent&&"undefined"==typeof window){let s=require("./shuffle.js"),e=require("./range.js"),t=require("./distance.js"),r=require("./normal.js");function alphasort(s,e){return s<e?-1:s>e?1:0}let o,a=s(e(1,7)),n=e(1,7),l=sort(a,alphasort);assert(0===t(n,l),"sort(shuffle(range(1, 7)), alphasort) should be range(1, 7)!"),n=[{x:10},{x:5},{x:3}],l=sort(a=[{x:5},{x:3},{x:10}],function(s,e){return s.x<e.x?1:s.x>e.x?-1:0});for(let s=0;s<l.length-1;s++)assert(l[s].x>l[s+1].x,"The objects should've been reverse-sorted by x-value!");l=sort(a=r(1e4),alphasort);for(let s=0;s<l.length-1;s++)assert(l[s]<l[s+1],`${l[s]} should be less than ${l[s+1]}!`);n=["a","b","c","d","e","f"],l=sort(a=["b","c","a","d","f","e"],alphasort);for(let s=0;s<n.length;s++)assert(n[s]===l[s],'sort(["b", "c", "a", "d", "f", "e"], alphasort) should be ["a", "b", "c", "d", "e", "f"]!');try{o=!1,sort()}catch(s){o=!0}assert(o,"sort() should have failed!");try{o=!1,sort([],[])}catch(s){o=!0}assert(o,"sort([], []) should have failed!");try{o=!1,sort("foo","foo")}catch(s){o=!0}assert(o,'sort("foo", "foo") should have failed!');try{o=!1,sort(!0,!0)}catch(s){o=!0}assert(o,"sort(true, true) should have failed!");try{o=!1,sort({},{})}catch(s){o=!0}assert(o,"sort({}, {}) should have failed!");try{let s;o=!1,sort(s,s)}catch(s){o=!0}assert(o,"sort(foo, foo) should have failed!");try{let s=()=>{};o=!1,sort(s,s)}catch(s){o=!0}assert(o,"sort(fn, fn) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./distance.js":22,"./is-array.js":29,"./is-undefined.js":35,"./normal.js":45,"./range.js":49,"./shuffle.js":56}],61:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isNumber=require("./is-number.js"),vectorize=require("./vectorize.js"),sqrt=vectorize(function(s){return assert(!isUndefined(s),"You must pass a number or an array of numbers into the `sqrt` function!"),assert(isNumber(s),"You must pass a number or an array of numbers into the `sqrt` function!"),assert(s>=0,"The `sqrt` function only operates on zero or positive numbers!"),Math.sqrt(s)});if(module.exports=sqrt,!module.parent&&"undefined"==typeof window){let s,e=require("./distance.js"),t=4,r=2,a=sqrt(t);assert(r===a,`sqrt(4) should be 2, but instead was ${a}!`),r=[3,2,4],a=sqrt(t=[9,4,16]),assert(0===e(r,a),"sqrt([9, 4, 16]) should be [3, 2, 4]!");try{s=!1,sqrt()}catch(e){s=!0}assert(s,"sqrt() should have failed!");try{s=!1,sqrt("foo")}catch(e){s=!0}assert(s,'sqrt("foo") should have failed!');try{s=!1,sqrt(!0)}catch(e){s=!0}assert(s,"sqrt(true) should have failed!");try{s=!1,sqrt({})}catch(e){s=!0}assert(s,"sqrt({}) should have failed!");try{s=!1,sqrt(-4)}catch(e){s=!0}assert(s,"sqrt(-4) should have failed!");try{s=!1,sqrt(()=>{})}catch(e){s=!0}assert(s,"sqrt(() => {}) should have failed!");try{let e;s=!1,sqrt(e)}catch(e){s=!0}assert(s,"sqrt(foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./distance.js":22,"./is-number.js":33,"./is-undefined.js":35,"./vectorize.js":67}],62:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js"),isNumber=require("./is-number.js"),flatten=require("./flatten.js"),mean=require("./mean.js"),pow=require("./pow.js"),sqrt=require("./sqrt.js");function std(s){assert(!isUndefined(s),"You must pass an array of numbers into the `std` function!"),assert(isArray(s),"You must pass an array of numbers into the `std` function!");let e=flatten(s);if(0===e.length)return;e.forEach(function(s){assert(isNumber(s),"You must pass an array of numbers into the `std` function!")});let t=mean(e),r=0;return e.forEach(s=>r+=pow(s-t,2)),sqrt(r/e.length)}if(module.exports=std,!module.parent&&"undefined"==typeof window){let s,e=require("./normal.js"),t=require("./abs.js"),r=require("./add.js"),a=require("./scale.js"),d=e(1e4);assert(t(std(d)-1)<.05,"std(normal(10000)) should be approximately 1!"),d=r(a(d,100),-250),assert(t(std(d)-100)<5,"std(normal(10000) * 100 - 250) should be approximately 100!");try{s=!1,std()}catch(e){s=!0}assert(s,"std() should have failed!");try{s=!1,std(123)}catch(e){s=!0}assert(s,"std(123) should have failed!");try{s=!1,std("foo")}catch(e){s=!0}assert(s,'std("foo") should have failed!');try{s=!1,std(!0)}catch(e){s=!0}assert(s,"std(true) should have failed!");try{s=!1,std({})}catch(e){s=!0}assert(s,"std({}) should have failed!");try{s=!1,std(()=>{})}catch(e){s=!0}assert(s,"std(() => {}) should have failed!");try{let e;s=!1,std(e)}catch(e){s=!0}assert(s,"std(foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./abs.js":6,"./add.js":7,"./flatten.js":25,"./is-array.js":29,"./is-number.js":33,"./is-undefined.js":35,"./mean.js":40,"./normal.js":45,"./pow.js":47,"./scale.js":52,"./sqrt.js":61}],63:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js"),isNumber=require("./is-number.js"),flatten=require("./flatten.js");function sum(s){assert(!isUndefined(s),"You must pass an array of numbers into the `sum` function!"),assert(isArray(s),"You must pass an array of numbers into the `sum` function!");let e=flatten(s);e.forEach(function(s){assert(isNumber(s),"You must pass an array of numbers into the `sum` function!")});let u=0;return e.forEach(s=>u+=s),u}if(module.exports=sum,!module.parent&&"undefined"==typeof window){let s,e=require("./range.js"),u=(require("./normal.js"),require("./abs.js"),[2,3,4]),r=9,t=sum(u);assert(r===t,`sum([2, 3, 4]) should be 9, but instead is ${t}!`),u=e(-100,101),r=0,t=sum(u),assert(r===t,`sum(range(-100, 101)) should be 0, but instead is ${t}!`),r=0,t=sum(u=[]),assert(r===t,`sum([]) should be 0, but instead was ${t}!`);try{s=!1,sum()}catch(e){s=!0}assert(s,"sum() should have failed!");try{s=!1,sum("foo")}catch(e){s=!0}assert(s,'sum("foo") should have failed!');try{s=!1,sum(123)}catch(e){s=!0}assert(s,"sum(123) should have failed!");try{s=!1,sum(!0)}catch(e){s=!0}assert(s,"sum(true) should have failed!");try{s=!1,sum(()=>{})}catch(e){s=!0}assert(s,"sum(() => {}) should have failed!");try{s=!1,sum({})}catch(e){s=!0}assert(s,"sum({}) should have failed!");try{s=!1,sum([1,2,"three"])}catch(e){s=!0}assert(s,'sum([1, 2, "three"]) should have failed!'),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./abs.js":6,"./flatten.js":25,"./is-array.js":29,"./is-number.js":33,"./is-undefined.js":35,"./normal.js":45,"./range.js":49}],64:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isNumber=require("./is-number.js"),vectorize=require("./vectorize.js"),floor=require("./floor.js"),tan=vectorize(function(e){assert(!isUndefined(e),"You must pass a number or an array of numbers into the `tan` function!"),assert(isNumber(e),"You must pass a number or an array of numbers into the `tan` function!");let t=(e-Math.PI/2)/Math.PI;if(t!==floor(t))return Math.tan(e)});if(module.exports=tan,!module.parent&&"undefined"==typeof window){let e,t=require("./abs.js"),a=require("./normal.js"),s=Math.PI/4,r=1,n=tan(s);assert(t(r-n)<.01,`tan(pi / 4) should be 1, but instead was ${n}!`),s=-Math.PI/2,r=void 0,n=tan(s),assert(r===n,"tan(-pi / 2) should be undefined, but instead was ${yPred}!"),s=2*Math.PI,r=0,n=tan(s),assert(t(r-n)<.01,`tan(2 * pi) should be 0, but instead was ${n}!`);try{e=!1,tan()}catch(t){e=!0}assert(e,"tan() should have failed!");try{e=!1,tan(a(1e4))}catch(t){e=!0}assert(!e,"tan(normal(10000)) should not have failed!");try{e=!1,tan("foo")}catch(t){e=!0}assert(e,'tan("foo") should have failed!');try{e=!1,tan(!0)}catch(t){e=!0}assert(e,"tan(true) should have failed!");try{e=!1,tan({})}catch(t){e=!0}assert(e,"tan({}) should have failed!");try{e=!1,tan(()=>{})}catch(t){e=!0}assert(e,"tan(() => {}) should have failed!");try{let t;e=!1,tan(t)}catch(t){e=!0}assert(e,"tan(foo) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./abs.js":6,"./floor.js":26,"./is-number.js":33,"./is-undefined.js":35,"./normal.js":45,"./vectorize.js":67}],65:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js"),shape=require("./shape.js"),reverse=require("./reverse.js"),ndarray=require("./ndarray.js");function transpose(s){assert(!isUndefined(s),"You must pass an array into the `transpose` function!"),assert(isArray(s),"You must pass an array into the `transpose` function!");let e=shape(s);if(assert(e.length<=2,"I'm not smart enough to know how to transpose arrays that have more than 2 dimensions. Sorry for the inconvenience! Please only pass 1- or 2-dimensional arrays into the `transpose` function!"),1===e.length)return reverse(s);if(2===e.length){let r=ndarray(reverse(e));for(let a=0;a<e[0];a++)for(let t=0;t<e[1];t++)r[t][a]=s[a][t];return r}}if(module.exports=transpose,!module.parent&&"undefined"==typeof window){let s,e=require("./is-equal.js"),r=[2,3,4],a=[4,3,2],t=transpose(r);assert(e(a,t),"transpose([2, 3, 4]) should be [4, 3, 2]!"),a=[[2,5,8],[3,6,9],[4,7,10]],t=transpose(r=[[2,3,4],[5,6,7],[8,9,10]]),assert(e(a,t),"transpose([[2, 3, 4], [5, 6, 7], [8, 9, 10]]) should be [[2, 5, 8], [3, 6, 9], [4, 7, 10]]!"),a=[["a","e"],["b","f"],["c","g"],["d","h"]],t=transpose(r=[["a","b","c","d"],["e","f","g","h"]]),assert(e(a,t),'transpose([["a", "b", "c", "d"], ["e", "f", "g", "h"]]) should be [["a", "e"], ["b", "f"], ["c", "g"], ["d", "h"]]!');try{s=!1,transpose()}catch(e){s=!0}assert(s,"transpose() should have failed!");try{s=!1,transpose([[2,3,4],[5,6]])}catch(e){s=!0}assert(s,"transpose([[2, 3, 4], [5, 6]]) should have failed!");try{s=!1,transpose({})}catch(e){s=!0}assert(s,"transpose({}) should have failed!");try{s=!1,transpose(()=>{})}catch(e){s=!0}assert(s,"transpose(() => {}) should have failed!");try{s=!1,transpose("foo")}catch(e){s=!0}assert(s,'transpose("foo") should have failed!');try{s=!1,transpose(234)}catch(e){s=!0}assert(s,"transpose(234) should have failed!");try{s=!1,transpose(!0)}catch(e){s=!0}assert(s,"transpose(true) should have failed!");try{s=!1,transpose(ndarray([2,3,4]))}catch(e){s=!0}assert(s,"transpose() should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-array.js":29,"./is-equal.js":31,"./is-undefined.js":35,"./ndarray.js":44,"./reverse.js":50,"./shape.js":55}],66:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isArray=require("./is-array.js"),isNumber=require("./is-number.js"),flatten=require("./flatten.js"),pow=require("./pow.js"),std=require("./std.js");function variance(e){assert(!isUndefined(e),"You must pass an array of numbers into the `variance` function!"),assert(isArray(e),"You must pass an array of numbers into the `std` function!");let a=flatten(e);return a.forEach(function(e){assert(isNumber(e),"You must pass an array of numbers into the `std` function!")}),pow(std(a),2)}if(module.exports=variance,!module.parent&&"undefined"==typeof window){let e,a=require("./abs.js"),r=require("./normal.js"),s=require("./scale.js"),t=r(1e4),i=1,n=variance(t);assert(a(i-n)<.05,`variance(normal(10000)) should be approximately 1, but instead is ${n}!`),t=s(r([10,10,10,10]),2),i=4,n=variance(t),assert(a(i-n)<.05,`variance(normal(10000) * 2) should be approximately 4, but instead is ${n}!`);try{e=!1,variance()}catch(a){e=!0}assert(e,"variance() should have failed!");try{e=!1,variance("foo")}catch(a){e=!0}assert(e,'variance("foo") should have failed!');try{e=!1,variance(!0)}catch(a){e=!0}assert(e,"variance(true) should have failed!");try{e=!1,variance(()=>{})}catch(a){e=!0}assert(e,"variance(() => {}) should have failed!");try{e=!1,variance({})}catch(a){e=!0}assert(e,"variance({}) should have failed!");try{let a;e=!1,variance(a)}catch(a){e=!0}assert(e,"variance(foo) should have failed!");try{e=!1,variance([1,2,"three"])}catch(a){e=!0}assert(e,'variance([1, 2, "three"]) should have failed!'),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./abs.js":6,"./flatten.js":25,"./is-array.js":29,"./is-number.js":33,"./is-undefined.js":35,"./normal.js":45,"./pow.js":47,"./scale.js":52,"./std.js":62}],67:[function(require,module,exports){
let assert=require("../misc/assert.js"),isUndefined=require("./is-undefined.js"),isFunction=require("./is-function.js"),isArray=require("./is-array.js"),max=require("./max.js");function vectorize(e){return assert(!isUndefined(e),"You must pass a function into the `vectorize` function!"),assert(isFunction(e),"You must pass a function into the `vectorize` function!"),function t(){if(Object.keys(arguments).map(e=>isArray(arguments[e])).indexOf(!0)>-1){let e=[],r=Object.keys(arguments).filter(e=>isArray(arguments[e])).map(e=>arguments[e].length),s=max(r);r.forEach(function(e){assert(e===s,"If using arrays for all arguments to this function, then the arrays must all have equal length!")});for(let r=0;r<s;r++){let s=Object.keys(arguments).map(e=>isArray(arguments[e])?arguments[e][r]:arguments[e]);e.push(t(...s))}return e}return e(...arguments)}}if(module.exports=vectorize,!module.parent&&"undefined"==typeof window){let e=require("./is-equal.js"),t=[2,3,4],r=[4,6,8],s=vectorize(e=>2*e)(t);assert(e(r,s),"double([2, 3, 4]) should be [4, 6, 8]!"),t=[0,1,2,3];let o=vectorize(e=>10);r=[10,10,10,10],s=o(t),assert(e(r,s),"tens([0, 1, 2, 3]) should be [10, 10, 10, 10]!"),t=[[[[1,2,3,4]]]];let a=vectorize(e=>e*e);r=[[[[1,4,9,16]]]],s=a(t),assert(e(r,s),"square([[[[1, 2, 3, 4]]]]) should be [[[[1, 4, 9, 16]]]]!"),t=["a","b","c"];let i,c=vectorize(e=>e+"foo");r=["afoo","bfoo","cfoo"],s=c(t),assert(e(r,s),'foo(["a", "b", "c"]) should be ["afoo", "bfoo", "cfoo"]!');try{i=!1,vectorize()}catch(e){i=!0}assert(i,"vectorize() should have failed!");try{i=!1,vectorize((e,t)=>e+t)([2,3,4],[5,6])}catch(e){i=!0}assert(i,"add([2, 3, 4], [5, 6]) should have failed!");try{i=!1,vectorize(123)}catch(e){i=!0}assert(i,"vectorize(123) should have failed!");try{i=!1,vectorize("foo")}catch(e){i=!0}assert(i,'vectorize("foo") should have failed!');try{i=!1,vectorize(!0)}catch(e){i=!0}assert(i,"vectorize(true) should have failed!");try{i=!1,vectorize({})}catch(e){i=!0}assert(i,"vectorize({}) should have failed!");try{let e;i=!1,vectorize(e)}catch(e){i=!0}assert(i,"vectorize(foo) should have failed!");try{i=!1,vectorize([])}catch(e){i=!0}assert(i,"vectorize([]) should have failed!"),console.log("All tests passed!")}

},{"../misc/assert.js":72,"./is-array.js":29,"./is-equal.js":31,"./is-function.js":32,"./is-undefined.js":35,"./max.js":39}],68:[function(require,module,exports){
let ndarray=require("./ndarray.js"),apply=require("../misc/apply.js");function zeros(r){return apply(ndarray(r),r=>0)}module.exports=zeros;

},{"../misc/apply.js":70,"./ndarray.js":44}],69:[function(require,module,exports){
let out={apply:require("./apply.js"),array:require("./array.js"),assert:require("./assert.js"),downloadJSON:require("./download-json.js"),dump:require("./dump.js"),pause:require("./pause.js"),print:require("./print.js")};module.exports=out;

},{"./apply.js":70,"./array.js":71,"./assert.js":72,"./download-json.js":73,"./dump.js":74,"./pause.js":75,"./print.js":76}],70:[function(require,module,exports){
let vectorize=require("../math/vectorize.js"),apply=vectorize(function(e,r){return r(e)});module.exports=apply;

},{"../math/vectorize.js":67}],71:[function(require,module,exports){
Array.prototype.asyncForEach=async function(t){for(let r=0;r<this.length;r++)await t(this[r],r,this);return this},Array.prototype.alphaSort=function(t){return this.sort(function(r,n){return t?r[t]<n[t]?-1:r[t]>n[t]?1:0:r<n?-1:r>n?1:0})};

},{}],72:[function(require,module,exports){
module.exports=function(o,r){if(!o)throw new Error(r)};

},{}],73:[function(require,module,exports){
function downloadJSON(e,t){let n=document.createElement("a");n.href=`data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(e,null,"\t"))}`,n.download=t,n.dispatchEvent(new MouseEvent("click"))}module.exports=downloadJSON;

},{}],74:[function(require,module,exports){
(function (global){(function (){
function dump(o,u=["dump"]){Object.keys(o).forEach(function(d){u.indexOf(d)<0&&(global[d]=o[d])})}module.exports=dump;

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],75:[function(require,module,exports){
function pause(e){return new Promise(function(t,r){try{return setTimeout(t,e)}catch(e){return r(e)}})}module.exports=pause;

},{}],76:[function(require,module,exports){
function print(n){return console.log(n)}module.exports=print;

},{}]},{},[4]);
